//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:2.0.50727.5485
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace System.Configuration.Core.Tests {
    using System;
    using System.Collections.Generic;



    
    
    /// <summary>
    /// 限定方案的容器，定义一组限定方案，用户可在限定方案基础上构建查询方案
    /// </summary>
    /// <remarks>
    /// 详细信息请参见<see cref="Digiwin.Common.UI.IQueryProjectContainer"/>
    /// </remarks>
    [DataEntityRegisterAttribute()]
    sealed class QueryProjectContainerElement : DependencyObjectView {
        
        /// <summary>
        /// Typekey
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        public const string TYPE_KEY = "QueryProjectContainerElement";
        
        /// <summary>
        /// 一组限定方案的集合
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty QueryProjectsProperty;
        
        /// <summary>
        /// DefaultType
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyObjectType DefaultType;
        
        private CachedViewPtr<DependencyObjectCollectionView<QueryProjectBaseElement>> _queryProjects;
        
        /// <summary>
        /// 构造函数
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1810:InitializeReferenceTypeStaticFieldsInline")]
        static QueryProjectContainerElement() {
            // DefaultType
            DefaultType = new DependencyObjectType("QueryProjectContainerElement", new Attribute[0], typeof(ConfigurationDependencyObject));
            // QueryProjects
            CollectionPropertyAttribute collectionPropertyAttribute0 = new CollectionPropertyAttribute(typeof(DependencyObject));
            collectionPropertyAttribute0.Description = "一组限定方案的集合";
            QueryProjectsProperty = DefaultType.RegisterCollectionProperty("QueryProjects", QueryProjectBaseElement.DefaultType, true, new Attribute[] {
                        collectionPropertyAttribute0});
        }
        
        /// <summary>
        /// 构造函数
        /// </summary>
        public QueryProjectContainerElement() : 
                base() {
            this.InitializeView();
        }
        
        /// <summary>
        /// 构造函数
        /// </summary>
        public QueryProjectContainerElement(DependencyObject obj) : 
                base(obj) {
            this.InitializeView();
        }
        
        /// <summary>
        /// 一组限定方案的集合
        /// </summary>
        public DependencyObjectCollectionView<QueryProjectBaseElement> QueryProjects {
            get {
                return _queryProjects.Value;
            }
        }
        
        private void InitializeView() {
            _queryProjects = this.RegisterCollectionViewPtr<QueryProjectBaseElement>(QueryProjectContainerElement.QueryProjectsProperty);
        }
    }
}
namespace System.Configuration.Core.Tests {
    using System;
    using System.Collections.Generic;



    
    
    /// <summary>
    /// 限定方案的抽象类
    /// </summary>
    [DataEntityRegisterAttribute()]
    sealed class QueryProjectBaseElement : DependencyObjectView {
        
        /// <summary>
        /// 限定方案Id，主键，不可为空，同一TypeKey或同一存储文件内不能重复
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty IdProperty;
        
        /// <summary>
        /// 限定方案的起始位置，用实体的完整路径表示，如OrderSheet.Details。
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty QueryEntityProperty;
        
        /// <summary>
        /// 限定方案的上下文字段列名.
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty ContextDataColumnProperty;
        
        /// <summary>
        /// 限定方案是否为系统级别
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty IsSystemProperty;
        
        /// <summary>
        /// 限定方案是否为公用级别
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty IsPublicProperty;
        
        /// <summary>
        /// 限定方案显示的名称，不可为空
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty DisplayNameProperty;
        
        /// <summary>
        /// 限定方案在浏览界面上显示的工具栏提示信息
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty DescriptionProperty;
        
        /// <summary>
        /// 限定方案类型，分为两种：一种是绑定到下拉列表上（Select）；一种是绑定在普通浏览界面上（Browse）,不可为空
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty ProjectTypeProperty;
        
        /// <summary>
        /// 限定方案上从左至右的可缩排列数
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty IndentColumnCountProperty;
        
        /// <summary>
        /// 限定方案对应的EditorView的SubName，默认为null则调用平台提供的默认EditorView
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty EditorViewNameProperty;
        
        /// <summary>
        /// 限定方案的顺序号
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty SequenceProperty;
        
        /// <summary>
        /// 查询列的集合
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty QueryViewColumnsProperty;
        
        /// <summary>
        /// 条件格式的集合
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty QueryConditionFormatsProperty;
        
        /// <summary>
        /// DefaultType
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyObjectType DefaultType;
        
        private CachedViewPtr<DependencyObjectCollectionView<QueryViewColumnElement>> _queryViewColumns;
        
        private CachedViewPtr<DependencyObjectCollectionView<QueryConditionFormatElement>> _queryConditionFormats;
        
        /// <summary>
        /// 构造函数
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1810:InitializeReferenceTypeStaticFieldsInline")]
        static QueryProjectBaseElement() {
            // DefaultType
            DefaultType = new DependencyObjectType("QueryProjectBaseElement", new Attribute[] {
                        new DataEntityAttribute("Id")});
            // Id
            SimplePropertyAttribute simplePropertyAttribute0 = new SimplePropertyAttribute(GeneralDBType.String);
            simplePropertyAttribute0.Description = "限定方案Id，主键，不可为空，同一TypeKey或同一存储文件内不能重复";
            IdProperty = DefaultType.RegisterSimpleProperty("Id", typeof(string), null, false, new Attribute[] {
                        simplePropertyAttribute0});
            // QueryEntity
            SimplePropertyAttribute simplePropertyAttribute1 = new SimplePropertyAttribute(GeneralDBType.String);
            simplePropertyAttribute1.Description = "限定方案的起始位置，用实体的完整路径表示，如OrderSheet.Details。";
            QueryEntityProperty = DefaultType.RegisterSimpleProperty("QueryEntity", typeof(string), null, false, new Attribute[] {
                        simplePropertyAttribute1});
            // ContextDataColumn
            SimplePropertyAttribute simplePropertyAttribute2 = new SimplePropertyAttribute(GeneralDBType.String);
            simplePropertyAttribute2.Description = "限定方案的上下文字段列名.";
            ContextDataColumnProperty = DefaultType.RegisterSimpleProperty("ContextDataColumn", typeof(string), null, false, new Attribute[] {
                        simplePropertyAttribute2});
            // IsSystem
            SimplePropertyAttribute simplePropertyAttribute3 = new SimplePropertyAttribute(GeneralDBType.Boolean);
            simplePropertyAttribute3.Description = "限定方案是否为系统级别";
            IsSystemProperty = DefaultType.RegisterSimpleProperty("IsSystem", typeof(bool), false, false, new Attribute[] {
                        simplePropertyAttribute3});
            // IsPublic
            SimplePropertyAttribute simplePropertyAttribute4 = new SimplePropertyAttribute(GeneralDBType.Boolean);
            simplePropertyAttribute4.Description = "限定方案是否为公用级别";
            IsPublicProperty = DefaultType.RegisterSimpleProperty("IsPublic", typeof(bool), true, false, new Attribute[] {
                        simplePropertyAttribute4});
            // DisplayName
            SimplePropertyAttribute simplePropertyAttribute5 = new SimplePropertyAttribute(GeneralDBType.String);
            simplePropertyAttribute5.Description = "限定方案显示的名称，不可为空";
            simplePropertyAttribute5.IsLocalizable = true;
            DisplayNameProperty = DefaultType.RegisterSimpleProperty("DisplayName", typeof(string), null, false, new Attribute[] {
                        simplePropertyAttribute5,
                        new LambdaDependencyAmbientValueAttribute("ActiveObject.Id")});
            // Description
            SimplePropertyAttribute simplePropertyAttribute6 = new SimplePropertyAttribute(GeneralDBType.String);
            simplePropertyAttribute6.Description = "限定方案在浏览界面上显示的工具栏提示信息";
            simplePropertyAttribute6.IsLocalizable = true;
            DescriptionProperty = DefaultType.RegisterSimpleProperty("Description", typeof(string), null, false, new Attribute[] {
                        simplePropertyAttribute6});
            // ProjectType
            SimplePropertyAttribute simplePropertyAttribute7 = new SimplePropertyAttribute(GeneralDBType.String);
            simplePropertyAttribute7.Description = "限定方案类型，分为两种：一种是绑定到下拉列表上（Select）；一种是绑定在普通浏览界面上（Browse）,不可为空";
            ProjectTypeProperty = DefaultType.RegisterSimpleProperty("ProjectType", typeof(string), null, false, new Attribute[] {
                        simplePropertyAttribute7});
            // IndentColumnCount
            SimplePropertyAttribute simplePropertyAttribute8 = new SimplePropertyAttribute(GeneralDBType.Int32);
            simplePropertyAttribute8.Description = "限定方案上从左至右的可缩排列数";
            IndentColumnCountProperty = DefaultType.RegisterSimpleProperty("IndentColumnCount", typeof(int), null, false, new Attribute[] {
                        simplePropertyAttribute8});
            // EditorViewName
            SimplePropertyAttribute simplePropertyAttribute9 = new SimplePropertyAttribute(GeneralDBType.String);
            simplePropertyAttribute9.Description = "限定方案对应的EditorView的SubName，默认为null则调用平台提供的默认EditorView";
            EditorViewNameProperty = DefaultType.RegisterSimpleProperty("EditorViewName", typeof(string), null, false, new Attribute[] {
                        simplePropertyAttribute9});
            // Sequence
            SimplePropertyAttribute simplePropertyAttribute10 = new SimplePropertyAttribute(GeneralDBType.Int32);
            simplePropertyAttribute10.Description = "限定方案的顺序号";
            SequenceProperty = DefaultType.RegisterSimpleProperty("Sequence", typeof(int), null, false, new Attribute[] {
                        simplePropertyAttribute10});
            // QueryViewColumns
            CollectionPropertyAttribute collectionPropertyAttribute0 = new CollectionPropertyAttribute(typeof(DependencyObject));
            collectionPropertyAttribute0.Description = "查询列的集合";
            QueryViewColumnsProperty = DefaultType.RegisterCollectionProperty("QueryViewColumns", QueryViewColumnElement.DefaultType, true, new Attribute[] {
                        collectionPropertyAttribute0});
            // QueryConditionFormats
            CollectionPropertyAttribute collectionPropertyAttribute1 = new CollectionPropertyAttribute(typeof(DependencyObject));
            collectionPropertyAttribute1.Description = "条件格式的集合";
            QueryConditionFormatsProperty = DefaultType.RegisterCollectionProperty("QueryConditionFormats", QueryConditionFormatElement.DefaultType, true, new Attribute[] {
                        collectionPropertyAttribute1});
        }
        
        /// <summary>
        /// 构造函数
        /// </summary>
        public QueryProjectBaseElement() : 
                base() {
            this.InitializeView();
        }
        
        /// <summary>
        /// 构造函数
        /// </summary>
        public QueryProjectBaseElement(DependencyObject obj) : 
                base(obj) {
            this.InitializeView();
        }
        
        /// <summary>
        /// 限定方案Id，主键，不可为空，同一TypeKey或同一存储文件内不能重复
        /// </summary>
        public string Id {
            get {
                return ((string)(this.DependencyObject[QueryProjectBaseElement.IdProperty]));
            }
            set {
                this.DependencyObject[QueryProjectBaseElement.IdProperty] = value;
            }
        }
        
        /// <summary>
        /// 限定方案的起始位置，用实体的完整路径表示，如OrderSheet.Details。
        /// </summary>
        public string QueryEntity {
            get {
                return ((string)(this.DependencyObject[QueryProjectBaseElement.QueryEntityProperty]));
            }
            set {
                this.DependencyObject[QueryProjectBaseElement.QueryEntityProperty] = value;
            }
        }
        
        /// <summary>
        /// 限定方案的上下文字段列名.
        /// </summary>
        public string ContextDataColumn {
            get {
                return ((string)(this.DependencyObject[QueryProjectBaseElement.ContextDataColumnProperty]));
            }
            set {
                this.DependencyObject[QueryProjectBaseElement.ContextDataColumnProperty] = value;
            }
        }
        
        /// <summary>
        /// 限定方案是否为系统级别
        /// </summary>
        public bool IsSystem {
            get {
                return ((bool)(this.DependencyObject[QueryProjectBaseElement.IsSystemProperty]));
            }
            set {
                this.DependencyObject[QueryProjectBaseElement.IsSystemProperty] = value;
            }
        }
        
        /// <summary>
        /// 限定方案是否为公用级别
        /// </summary>
        public bool IsPublic {
            get {
                return ((bool)(this.DependencyObject[QueryProjectBaseElement.IsPublicProperty]));
            }
            set {
                this.DependencyObject[QueryProjectBaseElement.IsPublicProperty] = value;
            }
        }
        
        /// <summary>
        /// 限定方案显示的名称，不可为空
        /// </summary>
        public string DisplayName {
            get {
                return ((string)(this.DependencyObject[QueryProjectBaseElement.DisplayNameProperty]));
            }
            set {
                this.DependencyObject[QueryProjectBaseElement.DisplayNameProperty] = value;
            }
        }
        
        /// <summary>
        /// 限定方案在浏览界面上显示的工具栏提示信息
        /// </summary>
        public string Description {
            get {
                return ((string)(this.DependencyObject[QueryProjectBaseElement.DescriptionProperty]));
            }
            set {
                this.DependencyObject[QueryProjectBaseElement.DescriptionProperty] = value;
            }
        }
        
        /// <summary>
        /// 限定方案类型，分为两种：一种是绑定到下拉列表上（Select）；一种是绑定在普通浏览界面上（Browse）,不可为空
        /// </summary>
        public string ProjectType {
            get {
                return ((string)(this.DependencyObject[QueryProjectBaseElement.ProjectTypeProperty]));
            }
            set {
                this.DependencyObject[QueryProjectBaseElement.ProjectTypeProperty] = value;
            }
        }
        
        /// <summary>
        /// 限定方案上从左至右的可缩排列数
        /// </summary>
        public int IndentColumnCount {
            get {
                return ((int)(this.DependencyObject[QueryProjectBaseElement.IndentColumnCountProperty]));
            }
            set {
                this.DependencyObject[QueryProjectBaseElement.IndentColumnCountProperty] = value;
            }
        }
        
        /// <summary>
        /// 限定方案对应的EditorView的SubName，默认为null则调用平台提供的默认EditorView
        /// </summary>
        public string EditorViewName {
            get {
                return ((string)(this.DependencyObject[QueryProjectBaseElement.EditorViewNameProperty]));
            }
            set {
                this.DependencyObject[QueryProjectBaseElement.EditorViewNameProperty] = value;
            }
        }
        
        /// <summary>
        /// 限定方案的顺序号
        /// </summary>
        public int Sequence {
            get {
                return ((int)(this.DependencyObject[QueryProjectBaseElement.SequenceProperty]));
            }
            set {
                this.DependencyObject[QueryProjectBaseElement.SequenceProperty] = value;
            }
        }
        
        /// <summary>
        /// 查询列的集合
        /// </summary>
        public DependencyObjectCollectionView<QueryViewColumnElement> QueryViewColumns {
            get {
                return _queryViewColumns.Value;
            }
        }
        
        /// <summary>
        /// 条件格式的集合
        /// </summary>
        public DependencyObjectCollectionView<QueryConditionFormatElement> QueryConditionFormats {
            get {
                return _queryConditionFormats.Value;
            }
        }
        
        private void InitializeView() {
            _queryViewColumns = this.RegisterCollectionViewPtr<QueryViewColumnElement>(QueryProjectBaseElement.QueryViewColumnsProperty);
            _queryConditionFormats = this.RegisterCollectionViewPtr<QueryConditionFormatElement>(QueryProjectBaseElement.QueryConditionFormatsProperty);
        }
    }
}
namespace System.Configuration.Core.Tests {
    using System;
    using System.Collections.Generic;



    
    
    /// <summary>
    /// 限定方案的定义
    /// </summary>
    [DataEntityRegisterAttribute()]
    sealed class QueryProjectElement : DependencyObjectView {
        
        /// <summary>
        /// 限定方案的限定条件的集合
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty ConditionProperty;
        
        /// <summary>
        /// 限定方案的用户条件，会出现在查询方案面板中与用户条件合并
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty CustomerConditionProperty;
        
        /// <summary>
        /// 供开窗使用的简单条件列表
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty SimpleConditionColumnsProperty;
        
        /// <summary>
        /// 必输条件列表
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty MandatoryConditionsProperty;
        
        /// <summary>
        /// DefaultType
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyObjectType DefaultType;
        
        private CachedViewPtr<ConditionItemBaseElement> _condition;
        
        private CachedViewPtr<ConditionItemBaseElement> _customerCondition;
        
        private CachedViewPtr<DependencyObjectCollectionView<SimpleConditionColumnElement>> _simpleConditionColumns;
        
        private CachedViewPtr<DependencyObjectCollectionView<MandatoryConditionElement>> _mandatoryConditions;
        
        private CachedViewPtr<DependencyObjectCollectionView<QueryViewColumnElement>> _queryViewColumns;
        
        private CachedViewPtr<DependencyObjectCollectionView<QueryConditionFormatElement>> _queryConditionFormats;
        
        /// <summary>
        /// 构造函数
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1810:InitializeReferenceTypeStaticFieldsInline")]
        static QueryProjectElement() {
            // DefaultType
            DefaultType = new DependencyObjectType("QueryProjectElement");
            DefaultType.RegisterBaseType(QueryProjectBaseElement.DefaultType);
            // Condition
            ComplexPropertyAttribute complexPropertyAttribute0 = new ComplexPropertyAttribute();
            complexPropertyAttribute0.Description = "限定方案的限定条件的集合";
            ConditionProperty = DefaultType.RegisterComplexProperty("Condition", ConditionItemBaseElement.DefaultType, false, new Attribute[] {
                        complexPropertyAttribute0});
            // CustomerCondition
            ComplexPropertyAttribute complexPropertyAttribute1 = new ComplexPropertyAttribute();
            complexPropertyAttribute1.Description = "限定方案的用户条件，会出现在查询方案面板中与用户条件合并";
            CustomerConditionProperty = DefaultType.RegisterComplexProperty("CustomerCondition", ConditionItemBaseElement.DefaultType, false, new Attribute[] {
                        complexPropertyAttribute1});
            // SimpleConditionColumns
            CollectionPropertyAttribute collectionPropertyAttribute0 = new CollectionPropertyAttribute(typeof(DependencyObject));
            collectionPropertyAttribute0.Description = "供开窗使用的简单条件列表";
            SimpleConditionColumnsProperty = DefaultType.RegisterCollectionProperty("SimpleConditionColumns", SimpleConditionColumnElement.DefaultType, true, new Attribute[] {
                        collectionPropertyAttribute0});
            // MandatoryConditions
            CollectionPropertyAttribute collectionPropertyAttribute1 = new CollectionPropertyAttribute(typeof(DependencyObject));
            collectionPropertyAttribute1.Description = "必输条件列表";
            MandatoryConditionsProperty = DefaultType.RegisterCollectionProperty("MandatoryConditions", MandatoryConditionElement.DefaultType, true, new Attribute[] {
                        collectionPropertyAttribute1});
        }
        
        /// <summary>
        /// 构造函数
        /// </summary>
        public QueryProjectElement() : 
                base() {
            this.InitializeView();
        }
        
        /// <summary>
        /// 构造函数
        /// </summary>
        public QueryProjectElement(DependencyObject obj) : 
                base(obj) {
            this.InitializeView();
        }
        
        /// <summary>
        /// 限定方案Id，主键，不可为空，同一TypeKey或同一存储文件内不能重复
        /// </summary>
        public string Id {
            get {
                return ((string)(this.DependencyObject[QueryProjectBaseElement.IdProperty]));
            }
            set {
                this.DependencyObject[QueryProjectBaseElement.IdProperty] = value;
            }
        }
        
        /// <summary>
        /// 限定方案的起始位置，用实体的完整路径表示，如OrderSheet.Details。
        /// </summary>
        public string QueryEntity {
            get {
                return ((string)(this.DependencyObject[QueryProjectBaseElement.QueryEntityProperty]));
            }
            set {
                this.DependencyObject[QueryProjectBaseElement.QueryEntityProperty] = value;
            }
        }
        
        /// <summary>
        /// 限定方案的上下文字段列名.
        /// </summary>
        public string ContextDataColumn {
            get {
                return ((string)(this.DependencyObject[QueryProjectBaseElement.ContextDataColumnProperty]));
            }
            set {
                this.DependencyObject[QueryProjectBaseElement.ContextDataColumnProperty] = value;
            }
        }
        
        /// <summary>
        /// 限定方案是否为系统级别
        /// </summary>
        public bool IsSystem {
            get {
                return ((bool)(this.DependencyObject[QueryProjectBaseElement.IsSystemProperty]));
            }
            set {
                this.DependencyObject[QueryProjectBaseElement.IsSystemProperty] = value;
            }
        }
        
        /// <summary>
        /// 限定方案是否为公用级别
        /// </summary>
        public bool IsPublic {
            get {
                return ((bool)(this.DependencyObject[QueryProjectBaseElement.IsPublicProperty]));
            }
            set {
                this.DependencyObject[QueryProjectBaseElement.IsPublicProperty] = value;
            }
        }
        
        /// <summary>
        /// 限定方案显示的名称，不可为空
        /// </summary>
        public string DisplayName {
            get {
                return ((string)(this.DependencyObject[QueryProjectBaseElement.DisplayNameProperty]));
            }
            set {
                this.DependencyObject[QueryProjectBaseElement.DisplayNameProperty] = value;
            }
        }
        
        /// <summary>
        /// 限定方案在浏览界面上显示的工具栏提示信息
        /// </summary>
        public string Description {
            get {
                return ((string)(this.DependencyObject[QueryProjectBaseElement.DescriptionProperty]));
            }
            set {
                this.DependencyObject[QueryProjectBaseElement.DescriptionProperty] = value;
            }
        }
        
        /// <summary>
        /// 限定方案类型，分为两种：一种是绑定到下拉列表上（Select）；一种是绑定在普通浏览界面上（Browse）,不可为空
        /// </summary>
        public string ProjectType {
            get {
                return ((string)(this.DependencyObject[QueryProjectBaseElement.ProjectTypeProperty]));
            }
            set {
                this.DependencyObject[QueryProjectBaseElement.ProjectTypeProperty] = value;
            }
        }
        
        /// <summary>
        /// 限定方案上从左至右的可缩排列数
        /// </summary>
        public int IndentColumnCount {
            get {
                return ((int)(this.DependencyObject[QueryProjectBaseElement.IndentColumnCountProperty]));
            }
            set {
                this.DependencyObject[QueryProjectBaseElement.IndentColumnCountProperty] = value;
            }
        }
        
        /// <summary>
        /// 限定方案对应的EditorView的SubName，默认为null则调用平台提供的默认EditorView
        /// </summary>
        public string EditorViewName {
            get {
                return ((string)(this.DependencyObject[QueryProjectBaseElement.EditorViewNameProperty]));
            }
            set {
                this.DependencyObject[QueryProjectBaseElement.EditorViewNameProperty] = value;
            }
        }
        
        /// <summary>
        /// 限定方案的顺序号
        /// </summary>
        public int Sequence {
            get {
                return ((int)(this.DependencyObject[QueryProjectBaseElement.SequenceProperty]));
            }
            set {
                this.DependencyObject[QueryProjectBaseElement.SequenceProperty] = value;
            }
        }
        
        /// <summary>
        /// 限定方案的限定条件的集合
        /// </summary>
        public ConditionItemBaseElement Condition {
            get {
                return _condition.Value;
            }
        }
        
        /// <summary>
        /// 限定方案的用户条件，会出现在查询方案面板中与用户条件合并
        /// </summary>
        public ConditionItemBaseElement CustomerCondition {
            get {
                return _customerCondition.Value;
            }
        }
        
        /// <summary>
        /// 供开窗使用的简单条件列表
        /// </summary>
        public DependencyObjectCollectionView<SimpleConditionColumnElement> SimpleConditionColumns {
            get {
                return _simpleConditionColumns.Value;
            }
        }
        
        /// <summary>
        /// 必输条件列表
        /// </summary>
        public DependencyObjectCollectionView<MandatoryConditionElement> MandatoryConditions {
            get {
                return _mandatoryConditions.Value;
            }
        }
        
        /// <summary>
        /// 查询列的集合
        /// </summary>
        public DependencyObjectCollectionView<QueryViewColumnElement> QueryViewColumns {
            get {
                return _queryViewColumns.Value;
            }
        }
        
        /// <summary>
        /// 条件格式的集合
        /// </summary>
        public DependencyObjectCollectionView<QueryConditionFormatElement> QueryConditionFormats {
            get {
                return _queryConditionFormats.Value;
            }
        }
        
        private void InitializeView() {
            _condition = this.RegisterComplexViewPtr<ConditionItemBaseElement>(QueryProjectElement.ConditionProperty);
            _customerCondition = this.RegisterComplexViewPtr<ConditionItemBaseElement>(QueryProjectElement.CustomerConditionProperty);
            _simpleConditionColumns = this.RegisterCollectionViewPtr<SimpleConditionColumnElement>(QueryProjectElement.SimpleConditionColumnsProperty);
            _mandatoryConditions = this.RegisterCollectionViewPtr<MandatoryConditionElement>(QueryProjectElement.MandatoryConditionsProperty);
            _queryViewColumns = this.RegisterCollectionViewPtr<QueryViewColumnElement>(QueryProjectBaseElement.QueryViewColumnsProperty);
            _queryConditionFormats = this.RegisterCollectionViewPtr<QueryConditionFormatElement>(QueryProjectBaseElement.QueryConditionFormatsProperty);
        }
    }
}
namespace System.Configuration.Core.Tests {
    using System;
    using System.Collections.Generic;



    
    
    /// <summary>
    /// OOQL类型限定方案的定义
    /// </summary>
    [DataEntityRegisterAttribute()]
    sealed class OoqlQueryProjectElement : DependencyObjectView {
        
        /// <summary>
        /// OOQL脚本
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty OoqlScriptProperty;
        
        /// <summary>
        /// 是否在外层SQL加上Distinct
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty IsDistinctProperty;
        
        /// <summary>
        /// 限定方案的用户条件，会出现在查询方案面板中与用户条件合并
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty CustomerConditionProperty;
        
        /// <summary>
        /// 供开窗使用的简单条件列表
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty SimpleConditionColumnsProperty;
        
        /// <summary>
        /// DefaultType
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyObjectType DefaultType;
        
        private CachedViewPtr<ConditionItemBaseElement> _customerCondition;
        
        private CachedViewPtr<DependencyObjectCollectionView<SimpleConditionColumnElement>> _simpleConditionColumns;
        
        private CachedViewPtr<DependencyObjectCollectionView<QueryViewColumnElement>> _queryViewColumns;
        
        private CachedViewPtr<DependencyObjectCollectionView<QueryConditionFormatElement>> _queryConditionFormats;
        
        /// <summary>
        /// 构造函数
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1810:InitializeReferenceTypeStaticFieldsInline")]
        static OoqlQueryProjectElement() {
            // DefaultType
            DefaultType = new DependencyObjectType("OoqlQueryProjectElement");
            DefaultType.RegisterBaseType(QueryProjectBaseElement.DefaultType);
            // OoqlScript
            SimplePropertyAttribute simplePropertyAttribute0 = new SimplePropertyAttribute(GeneralDBType.String);
            simplePropertyAttribute0.Description = "OOQL脚本";
            OoqlScriptProperty = DefaultType.RegisterSimpleProperty("OoqlScript", typeof(string), null, false, new Attribute[] {
                        simplePropertyAttribute0});
            // IsDistinct
            SimplePropertyAttribute simplePropertyAttribute1 = new SimplePropertyAttribute(GeneralDBType.Boolean);
            simplePropertyAttribute1.Description = "是否在外层SQL加上Distinct";
            IsDistinctProperty = DefaultType.RegisterSimpleProperty("IsDistinct", typeof(bool), null, false, new Attribute[] {
                        simplePropertyAttribute1});
            // CustomerCondition
            ComplexPropertyAttribute complexPropertyAttribute0 = new ComplexPropertyAttribute();
            complexPropertyAttribute0.Description = "限定方案的用户条件，会出现在查询方案面板中与用户条件合并";
            CustomerConditionProperty = DefaultType.RegisterComplexProperty("CustomerCondition", ConditionItemBaseElement.DefaultType, false, new Attribute[] {
                        complexPropertyAttribute0});
            // SimpleConditionColumns
            CollectionPropertyAttribute collectionPropertyAttribute0 = new CollectionPropertyAttribute(typeof(DependencyObject));
            collectionPropertyAttribute0.Description = "供开窗使用的简单条件列表";
            SimpleConditionColumnsProperty = DefaultType.RegisterCollectionProperty("SimpleConditionColumns", SimpleConditionColumnElement.DefaultType, true, new Attribute[] {
                        collectionPropertyAttribute0});
        }
        
        /// <summary>
        /// 构造函数
        /// </summary>
        public OoqlQueryProjectElement() : 
                base() {
            this.InitializeView();
        }
        
        /// <summary>
        /// 构造函数
        /// </summary>
        public OoqlQueryProjectElement(DependencyObject obj) : 
                base(obj) {
            this.InitializeView();
        }
        
        /// <summary>
        /// OOQL脚本
        /// </summary>
        public string OoqlScript {
            get {
                return ((string)(this.DependencyObject[OoqlQueryProjectElement.OoqlScriptProperty]));
            }
            set {
                this.DependencyObject[OoqlQueryProjectElement.OoqlScriptProperty] = value;
            }
        }
        
        /// <summary>
        /// 是否在外层SQL加上Distinct
        /// </summary>
        public bool IsDistinct {
            get {
                return ((bool)(this.DependencyObject[OoqlQueryProjectElement.IsDistinctProperty]));
            }
            set {
                this.DependencyObject[OoqlQueryProjectElement.IsDistinctProperty] = value;
            }
        }
        
        /// <summary>
        /// 限定方案Id，主键，不可为空，同一TypeKey或同一存储文件内不能重复
        /// </summary>
        public string Id {
            get {
                return ((string)(this.DependencyObject[QueryProjectBaseElement.IdProperty]));
            }
            set {
                this.DependencyObject[QueryProjectBaseElement.IdProperty] = value;
            }
        }
        
        /// <summary>
        /// 限定方案的起始位置，用实体的完整路径表示，如OrderSheet.Details。
        /// </summary>
        public string QueryEntity {
            get {
                return ((string)(this.DependencyObject[QueryProjectBaseElement.QueryEntityProperty]));
            }
            set {
                this.DependencyObject[QueryProjectBaseElement.QueryEntityProperty] = value;
            }
        }
        
        /// <summary>
        /// 限定方案的上下文字段列名.
        /// </summary>
        public string ContextDataColumn {
            get {
                return ((string)(this.DependencyObject[QueryProjectBaseElement.ContextDataColumnProperty]));
            }
            set {
                this.DependencyObject[QueryProjectBaseElement.ContextDataColumnProperty] = value;
            }
        }
        
        /// <summary>
        /// 限定方案是否为系统级别
        /// </summary>
        public bool IsSystem {
            get {
                return ((bool)(this.DependencyObject[QueryProjectBaseElement.IsSystemProperty]));
            }
            set {
                this.DependencyObject[QueryProjectBaseElement.IsSystemProperty] = value;
            }
        }
        
        /// <summary>
        /// 限定方案是否为公用级别
        /// </summary>
        public bool IsPublic {
            get {
                return ((bool)(this.DependencyObject[QueryProjectBaseElement.IsPublicProperty]));
            }
            set {
                this.DependencyObject[QueryProjectBaseElement.IsPublicProperty] = value;
            }
        }
        
        /// <summary>
        /// 限定方案显示的名称，不可为空
        /// </summary>
        public string DisplayName {
            get {
                return ((string)(this.DependencyObject[QueryProjectBaseElement.DisplayNameProperty]));
            }
            set {
                this.DependencyObject[QueryProjectBaseElement.DisplayNameProperty] = value;
            }
        }
        
        /// <summary>
        /// 限定方案在浏览界面上显示的工具栏提示信息
        /// </summary>
        public string Description {
            get {
                return ((string)(this.DependencyObject[QueryProjectBaseElement.DescriptionProperty]));
            }
            set {
                this.DependencyObject[QueryProjectBaseElement.DescriptionProperty] = value;
            }
        }
        
        /// <summary>
        /// 限定方案类型，分为两种：一种是绑定到下拉列表上（Select）；一种是绑定在普通浏览界面上（Browse）,不可为空
        /// </summary>
        public string ProjectType {
            get {
                return ((string)(this.DependencyObject[QueryProjectBaseElement.ProjectTypeProperty]));
            }
            set {
                this.DependencyObject[QueryProjectBaseElement.ProjectTypeProperty] = value;
            }
        }
        
        /// <summary>
        /// 限定方案上从左至右的可缩排列数
        /// </summary>
        public int IndentColumnCount {
            get {
                return ((int)(this.DependencyObject[QueryProjectBaseElement.IndentColumnCountProperty]));
            }
            set {
                this.DependencyObject[QueryProjectBaseElement.IndentColumnCountProperty] = value;
            }
        }
        
        /// <summary>
        /// 限定方案对应的EditorView的SubName，默认为null则调用平台提供的默认EditorView
        /// </summary>
        public string EditorViewName {
            get {
                return ((string)(this.DependencyObject[QueryProjectBaseElement.EditorViewNameProperty]));
            }
            set {
                this.DependencyObject[QueryProjectBaseElement.EditorViewNameProperty] = value;
            }
        }
        
        /// <summary>
        /// 限定方案的顺序号
        /// </summary>
        public int Sequence {
            get {
                return ((int)(this.DependencyObject[QueryProjectBaseElement.SequenceProperty]));
            }
            set {
                this.DependencyObject[QueryProjectBaseElement.SequenceProperty] = value;
            }
        }
        
        /// <summary>
        /// 限定方案的用户条件，会出现在查询方案面板中与用户条件合并
        /// </summary>
        public ConditionItemBaseElement CustomerCondition {
            get {
                return _customerCondition.Value;
            }
        }
        
        /// <summary>
        /// 供开窗使用的简单条件列表
        /// </summary>
        public DependencyObjectCollectionView<SimpleConditionColumnElement> SimpleConditionColumns {
            get {
                return _simpleConditionColumns.Value;
            }
        }
        
        /// <summary>
        /// 查询列的集合
        /// </summary>
        public DependencyObjectCollectionView<QueryViewColumnElement> QueryViewColumns {
            get {
                return _queryViewColumns.Value;
            }
        }
        
        /// <summary>
        /// 条件格式的集合
        /// </summary>
        public DependencyObjectCollectionView<QueryConditionFormatElement> QueryConditionFormats {
            get {
                return _queryConditionFormats.Value;
            }
        }
        
        private void InitializeView() {
            _customerCondition = this.RegisterComplexViewPtr<ConditionItemBaseElement>(OoqlQueryProjectElement.CustomerConditionProperty);
            _simpleConditionColumns = this.RegisterCollectionViewPtr<SimpleConditionColumnElement>(OoqlQueryProjectElement.SimpleConditionColumnsProperty);
            _queryViewColumns = this.RegisterCollectionViewPtr<QueryViewColumnElement>(QueryProjectBaseElement.QueryViewColumnsProperty);
            _queryConditionFormats = this.RegisterCollectionViewPtr<QueryConditionFormatElement>(QueryProjectBaseElement.QueryConditionFormatsProperty);
        }
    }
}
namespace System.Configuration.Core.Tests {
    using System;
    using System.Collections.Generic;



    
    
    /// <summary>
    /// 简单条件的基类，包含单列简单条件和多列的复合条件
    /// </summary>
    [DataEntityRegisterAttribute()]
    sealed class ConditionColumnBaseElement : DependencyObjectView {
        
        /// <summary>
        /// 简单条件编号，不可为空，同一集合内不可重复
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty IdProperty;
        
        /// <summary>
        /// DefaultType
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyObjectType DefaultType;
        
        /// <summary>
        /// 构造函数
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1810:InitializeReferenceTypeStaticFieldsInline")]
        static ConditionColumnBaseElement() {
            // DefaultType
            DefaultType = new DependencyObjectType("ConditionColumnBaseElement", new Attribute[] {
                        new DataEntityAttribute("Id")});
            // Id
            SimplePropertyAttribute simplePropertyAttribute0 = new SimplePropertyAttribute(GeneralDBType.String);
            simplePropertyAttribute0.Description = "简单条件编号，不可为空，同一集合内不可重复";
            IdProperty = DefaultType.RegisterSimpleProperty("Id", typeof(string), null, false, new Attribute[] {
                        simplePropertyAttribute0});
        }
        
        /// <summary>
        /// 构造函数
        /// </summary>
        public ConditionColumnBaseElement() : 
                base() {
        }
        
        /// <summary>
        /// 构造函数
        /// </summary>
        public ConditionColumnBaseElement(DependencyObject obj) : 
                base(obj) {
        }
        
        /// <summary>
        /// 简单条件编号，不可为空，同一集合内不可重复
        /// </summary>
        public string Id {
            get {
                return ((string)(this.DependencyObject[ConditionColumnBaseElement.IdProperty]));
            }
            set {
                this.DependencyObject[ConditionColumnBaseElement.IdProperty] = value;
            }
        }
    }
}
namespace System.Configuration.Core.Tests {
    using System;
    using System.Collections.Generic;



    
    
    /// <summary>
    /// 简单条件的基类，包含单列简单条件和多列的复合条件
    /// </summary>
    [DataEntityRegisterAttribute()]
    sealed class SimpleConditionColumnElement : DependencyObjectView {
        
        /// <summary>
        /// 默认条件运算符，默认GreaterEqual，类型为:CompareOperator
        /// </summary>
        /// <remarks>
        /// 详细信息请参见<see cref="CompareOperator"/>
        /// </remarks>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty OperatorProperty;
        
        /// <summary>
        /// DefaultType
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyObjectType DefaultType;
        
        /// <summary>
        /// 构造函数
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1810:InitializeReferenceTypeStaticFieldsInline")]
        static SimpleConditionColumnElement() {
            // DefaultType
            DefaultType = new DependencyObjectType("SimpleConditionColumnElement");
            DefaultType.RegisterBaseType(ConditionColumnBaseElement.DefaultType);
            // Operator
            SimplePropertyAttribute simplePropertyAttribute0 = new SimplePropertyAttribute(GeneralDBType.String);
            simplePropertyAttribute0.Description = "默认条件运算符，默认GreaterEqual，类型为:CompareOperator";
            OperatorProperty = DefaultType.RegisterSimpleProperty("Operator", typeof(string), "GreaterEqual", false, new Attribute[] {
                        simplePropertyAttribute0});
        }
        
        /// <summary>
        /// 构造函数
        /// </summary>
        public SimpleConditionColumnElement() : 
                base() {
        }
        
        /// <summary>
        /// 构造函数
        /// </summary>
        public SimpleConditionColumnElement(DependencyObject obj) : 
                base(obj) {
        }
        
        /// <summary>
        /// 默认条件运算符，默认GreaterEqual，类型为:CompareOperator
        /// </summary>
        /// <remarks>
        /// 详细信息请参见<see cref="CompareOperator"/>
        /// </remarks>
        public string Operator {
            get {
                return ((string)(this.DependencyObject[SimpleConditionColumnElement.OperatorProperty]));
            }
            set {
                this.DependencyObject[SimpleConditionColumnElement.OperatorProperty] = value;
            }
        }
        
        /// <summary>
        /// 简单条件编号，不可为空，同一集合内不可重复
        /// </summary>
        public string Id {
            get {
                return ((string)(this.DependencyObject[ConditionColumnBaseElement.IdProperty]));
            }
            set {
                this.DependencyObject[ConditionColumnBaseElement.IdProperty] = value;
            }
        }
    }
}
namespace System.Configuration.Core.Tests {
    using System;
    using System.Collections.Generic;



    
    
    /// <summary>
    /// 单列简单条件
    /// </summary>
    [DataEntityRegisterAttribute()]
    sealed class SingleConditionColumnElement : DependencyObjectView {
        
        /// <summary>
        /// 必须使用QueryViewColumn的别名对应 生成条件时会找到对应的Path
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty PropertyPathProperty;
        
        /// <summary>
        /// 默认排序规则，可选的值包括： None（不排序），Asc（升序），Desc（降序），默认Asc
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty SortTypeProperty;
        
        /// <summary>
        /// 是否是模糊查找列
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty InexactQueryEnableProperty;
        
        /// <summary>
        /// 模糊查找条件运算符，默认Equal，类型为:CompareOperator
        /// </summary>
        /// <remarks>
        /// 详细信息请参见<see cref="CompareOperator"/>
        /// </remarks>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty InexactQueryOperatorProperty;
        
        /// <summary>
        /// 在只显示一个Text的开窗时，是否使用该属性进行模糊查找，默认true
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty OneTextOpenEnableProperty;
        
        /// <summary>
        /// DefaultType
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyObjectType DefaultType;
        
        /// <summary>
        /// 构造函数
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1810:InitializeReferenceTypeStaticFieldsInline")]
        static SingleConditionColumnElement() {
            // DefaultType
            DefaultType = new DependencyObjectType("SingleConditionColumnElement");
            DefaultType.RegisterBaseType(SimpleConditionColumnElement.DefaultType);
            // PropertyPath
            SimplePropertyAttribute simplePropertyAttribute0 = new SimplePropertyAttribute(GeneralDBType.String);
            simplePropertyAttribute0.Description = "必须使用QueryViewColumn的别名对应 生成条件时会找到对应的Path";
            PropertyPathProperty = DefaultType.RegisterSimpleProperty("PropertyPath", typeof(string), null, false, new Attribute[] {
                        simplePropertyAttribute0});
            // SortType
            SimplePropertyAttribute simplePropertyAttribute1 = new SimplePropertyAttribute(GeneralDBType.String);
            simplePropertyAttribute1.Description = "默认排序规则，可选的值包括： None（不排序），Asc（升序），Desc（降序），默认Asc";
            SortTypeProperty = DefaultType.RegisterSimpleProperty("SortType", typeof(string), "Asc", false, new Attribute[] {
                        simplePropertyAttribute1});
            // InexactQueryEnable
            SimplePropertyAttribute simplePropertyAttribute2 = new SimplePropertyAttribute(GeneralDBType.Boolean);
            simplePropertyAttribute2.Description = "是否是模糊查找列";
            InexactQueryEnableProperty = DefaultType.RegisterSimpleProperty("InexactQueryEnable", typeof(bool), true, false, new Attribute[] {
                        simplePropertyAttribute2});
            // InexactQueryOperator
            SimplePropertyAttribute simplePropertyAttribute3 = new SimplePropertyAttribute(GeneralDBType.String);
            simplePropertyAttribute3.Description = "模糊查找条件运算符，默认Equal，类型为:CompareOperator";
            InexactQueryOperatorProperty = DefaultType.RegisterSimpleProperty("InexactQueryOperator", typeof(string), "Equal", false, new Attribute[] {
                        simplePropertyAttribute3});
            // OneTextOpenEnable
            SimplePropertyAttribute simplePropertyAttribute4 = new SimplePropertyAttribute(GeneralDBType.Boolean);
            simplePropertyAttribute4.Description = "在只显示一个Text的开窗时，是否使用该属性进行模糊查找，默认true";
            OneTextOpenEnableProperty = DefaultType.RegisterSimpleProperty("OneTextOpenEnable", typeof(bool), true, false, new Attribute[] {
                        simplePropertyAttribute4});
        }
        
        /// <summary>
        /// 构造函数
        /// </summary>
        public SingleConditionColumnElement() : 
                base() {
        }
        
        /// <summary>
        /// 构造函数
        /// </summary>
        public SingleConditionColumnElement(DependencyObject obj) : 
                base(obj) {
        }
        
        /// <summary>
        /// 必须使用QueryViewColumn的别名对应 生成条件时会找到对应的Path
        /// </summary>
        public string PropertyPath {
            get {
                return ((string)(this.DependencyObject[SingleConditionColumnElement.PropertyPathProperty]));
            }
            set {
                this.DependencyObject[SingleConditionColumnElement.PropertyPathProperty] = value;
            }
        }
        
        /// <summary>
        /// 默认排序规则，可选的值包括： None（不排序），Asc（升序），Desc（降序），默认Asc
        /// </summary>
        public string SortType {
            get {
                return ((string)(this.DependencyObject[SingleConditionColumnElement.SortTypeProperty]));
            }
            set {
                this.DependencyObject[SingleConditionColumnElement.SortTypeProperty] = value;
            }
        }
        
        /// <summary>
        /// 是否是模糊查找列
        /// </summary>
        public bool InexactQueryEnable {
            get {
                return ((bool)(this.DependencyObject[SingleConditionColumnElement.InexactQueryEnableProperty]));
            }
            set {
                this.DependencyObject[SingleConditionColumnElement.InexactQueryEnableProperty] = value;
            }
        }
        
        /// <summary>
        /// 模糊查找条件运算符，默认Equal，类型为:CompareOperator
        /// </summary>
        /// <remarks>
        /// 详细信息请参见<see cref="CompareOperator"/>
        /// </remarks>
        public string InexactQueryOperator {
            get {
                return ((string)(this.DependencyObject[SingleConditionColumnElement.InexactQueryOperatorProperty]));
            }
            set {
                this.DependencyObject[SingleConditionColumnElement.InexactQueryOperatorProperty] = value;
            }
        }
        
        /// <summary>
        /// 在只显示一个Text的开窗时，是否使用该属性进行模糊查找，默认true
        /// </summary>
        public bool OneTextOpenEnable {
            get {
                return ((bool)(this.DependencyObject[SingleConditionColumnElement.OneTextOpenEnableProperty]));
            }
            set {
                this.DependencyObject[SingleConditionColumnElement.OneTextOpenEnableProperty] = value;
            }
        }
        
        /// <summary>
        /// 默认条件运算符，默认GreaterEqual，类型为:CompareOperator
        /// </summary>
        /// <remarks>
        /// 详细信息请参见<see cref="CompareOperator"/>
        /// </remarks>
        public string Operator {
            get {
                return ((string)(this.DependencyObject[SimpleConditionColumnElement.OperatorProperty]));
            }
            set {
                this.DependencyObject[SimpleConditionColumnElement.OperatorProperty] = value;
            }
        }
        
        /// <summary>
        /// 简单条件编号，不可为空，同一集合内不可重复
        /// </summary>
        public string Id {
            get {
                return ((string)(this.DependencyObject[ConditionColumnBaseElement.IdProperty]));
            }
            set {
                this.DependencyObject[ConditionColumnBaseElement.IdProperty] = value;
            }
        }
    }
}
namespace System.Configuration.Core.Tests {
    using System;
    using System.Collections.Generic;



    
    
    /// <summary>
    /// 多列的复合简单条件
    /// </summary>
    [DataEntityRegisterAttribute()]
    sealed class MultiConditionColumnElement : DependencyObjectView {
        
        /// <summary>
        /// 单列简单条件的集合
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty ItemsProperty;
        
        /// <summary>
        /// DefaultType
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyObjectType DefaultType;
        
        private CachedViewPtr<DependencyObjectCollectionView<MultiConditionItemElement>> _items;
        
        /// <summary>
        /// 构造函数
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1810:InitializeReferenceTypeStaticFieldsInline")]
        static MultiConditionColumnElement() {
            // DefaultType
            DefaultType = new DependencyObjectType("MultiConditionColumnElement");
            DefaultType.RegisterBaseType(SimpleConditionColumnElement.DefaultType);
            // Items
            CollectionPropertyAttribute collectionPropertyAttribute0 = new CollectionPropertyAttribute(typeof(DependencyObject));
            collectionPropertyAttribute0.Description = "单列简单条件的集合";
            ItemsProperty = DefaultType.RegisterCollectionProperty("Items", MultiConditionItemElement.DefaultType, true, new Attribute[] {
                        collectionPropertyAttribute0});
        }
        
        /// <summary>
        /// 构造函数
        /// </summary>
        public MultiConditionColumnElement() : 
                base() {
            this.InitializeView();
        }
        
        /// <summary>
        /// 构造函数
        /// </summary>
        public MultiConditionColumnElement(DependencyObject obj) : 
                base(obj) {
            this.InitializeView();
        }
        
        /// <summary>
        /// 默认条件运算符，默认GreaterEqual，类型为:CompareOperator
        /// </summary>
        /// <remarks>
        /// 详细信息请参见<see cref="CompareOperator"/>
        /// </remarks>
        public string Operator {
            get {
                return ((string)(this.DependencyObject[SimpleConditionColumnElement.OperatorProperty]));
            }
            set {
                this.DependencyObject[SimpleConditionColumnElement.OperatorProperty] = value;
            }
        }
        
        /// <summary>
        /// 简单条件编号，不可为空，同一集合内不可重复
        /// </summary>
        public string Id {
            get {
                return ((string)(this.DependencyObject[ConditionColumnBaseElement.IdProperty]));
            }
            set {
                this.DependencyObject[ConditionColumnBaseElement.IdProperty] = value;
            }
        }
        
        /// <summary>
        /// 单列简单条件的集合
        /// </summary>
        public DependencyObjectCollectionView<MultiConditionItemElement> Items {
            get {
                return _items.Value;
            }
        }
        
        private void InitializeView() {
            _items = this.RegisterCollectionViewPtr<MultiConditionItemElement>(MultiConditionColumnElement.ItemsProperty);
        }
    }
}
namespace System.Configuration.Core.Tests {
    using System;
    using System.Collections.Generic;



    
    
    /// <summary>
    /// 多列的复合简单条件
    /// </summary>
    [DataEntityRegisterAttribute()]
    sealed class MultiConditionItemElement : DependencyObjectView {
        
        /// <summary>
        /// 属性全路径，支持Parent关键字访问上层实体，如CustomerId.Name，ContactInfo.ContactId.Name，不可为空
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty PropertyPathProperty;
        
        /// <summary>
        /// 默认排序规则，可选的值包括： None（不排序），Asc（升序），Desc（降序），默认Asc
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty SortTypeProperty;
        
        /// <summary>
        /// 复合条件的关键字文本框（MaskedTextBox）中，对应输入位置的最大字符数，也就是掩码的个数，会用-将输入位置隔离开。默认长度20
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty MaxLengthProperty;
        
        /// <summary>
        /// DefaultType
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyObjectType DefaultType;
        
        /// <summary>
        /// 构造函数
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1810:InitializeReferenceTypeStaticFieldsInline")]
        static MultiConditionItemElement() {
            // DefaultType
            DefaultType = new DependencyObjectType("MultiConditionItemElement");
            DefaultType.RegisterBaseType(ConditionColumnBaseElement.DefaultType);
            // PropertyPath
            SimplePropertyAttribute simplePropertyAttribute0 = new SimplePropertyAttribute(GeneralDBType.String);
            simplePropertyAttribute0.Description = "属性全路径，支持Parent关键字访问上层实体，如CustomerId.Name，ContactInfo.ContactId.Name，不可为空";
            PropertyPathProperty = DefaultType.RegisterSimpleProperty("PropertyPath", typeof(string), null, false, new Attribute[] {
                        simplePropertyAttribute0});
            // SortType
            SimplePropertyAttribute simplePropertyAttribute1 = new SimplePropertyAttribute(GeneralDBType.String);
            simplePropertyAttribute1.Description = "默认排序规则，可选的值包括： None（不排序），Asc（升序），Desc（降序），默认Asc";
            SortTypeProperty = DefaultType.RegisterSimpleProperty("SortType", typeof(string), "Asc", false, new Attribute[] {
                        simplePropertyAttribute1});
            // MaxLength
            SimplePropertyAttribute simplePropertyAttribute2 = new SimplePropertyAttribute(GeneralDBType.Int32);
            simplePropertyAttribute2.Description = "复合条件的关键字文本框（MaskedTextBox）中，对应输入位置的最大字符数，也就是掩码的个数，会用-将输入位置隔离开。默认长度20";
            MaxLengthProperty = DefaultType.RegisterSimpleProperty("MaxLength", typeof(int), 20, false, new Attribute[] {
                        simplePropertyAttribute2});
        }
        
        /// <summary>
        /// 构造函数
        /// </summary>
        public MultiConditionItemElement() : 
                base() {
        }
        
        /// <summary>
        /// 构造函数
        /// </summary>
        public MultiConditionItemElement(DependencyObject obj) : 
                base(obj) {
        }
        
        /// <summary>
        /// 属性全路径，支持Parent关键字访问上层实体，如CustomerId.Name，ContactInfo.ContactId.Name，不可为空
        /// </summary>
        public string PropertyPath {
            get {
                return ((string)(this.DependencyObject[MultiConditionItemElement.PropertyPathProperty]));
            }
            set {
                this.DependencyObject[MultiConditionItemElement.PropertyPathProperty] = value;
            }
        }
        
        /// <summary>
        /// 默认排序规则，可选的值包括： None（不排序），Asc（升序），Desc（降序），默认Asc
        /// </summary>
        public string SortType {
            get {
                return ((string)(this.DependencyObject[MultiConditionItemElement.SortTypeProperty]));
            }
            set {
                this.DependencyObject[MultiConditionItemElement.SortTypeProperty] = value;
            }
        }
        
        /// <summary>
        /// 复合条件的关键字文本框（MaskedTextBox）中，对应输入位置的最大字符数，也就是掩码的个数，会用-将输入位置隔离开。默认长度20
        /// </summary>
        public int MaxLength {
            get {
                return ((int)(this.DependencyObject[MultiConditionItemElement.MaxLengthProperty]));
            }
            set {
                this.DependencyObject[MultiConditionItemElement.MaxLengthProperty] = value;
            }
        }
        
        /// <summary>
        /// 简单条件编号，不可为空，同一集合内不可重复
        /// </summary>
        public string Id {
            get {
                return ((string)(this.DependencyObject[ConditionColumnBaseElement.IdProperty]));
            }
            set {
                this.DependencyObject[ConditionColumnBaseElement.IdProperty] = value;
            }
        }
    }
}
namespace System.Configuration.Core.Tests {
    using System;
    using System.Collections.Generic;



    
    
    /// <summary>
    /// OO类型的限定方案，通过调用服务方法直接查询
    /// </summary>
    [DataEntityRegisterAttribute()]
    sealed class QueryProjectOOElement : DependencyObjectView {
        
        /// <summary>
        /// OO限定方案关联的服务接口对应的查询方法，不可为空
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty MethodNameProperty;
        
        /// <summary>
        /// OO限定方案关联的服务接口类型全名称，不可为空
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty InterfaceTypeNameProperty;
        
        /// <summary>
        /// DefaultType
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyObjectType DefaultType;
        
        private CachedViewPtr<DependencyObjectCollectionView<QueryViewColumnElement>> _queryViewColumns;
        
        private CachedViewPtr<DependencyObjectCollectionView<QueryConditionFormatElement>> _queryConditionFormats;
        
        /// <summary>
        /// 构造函数
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1810:InitializeReferenceTypeStaticFieldsInline")]
        static QueryProjectOOElement() {
            // DefaultType
            DefaultType = new DependencyObjectType("QueryProjectOOElement");
            DefaultType.RegisterBaseType(QueryProjectBaseElement.DefaultType);
            // MethodName
            SimplePropertyAttribute simplePropertyAttribute0 = new SimplePropertyAttribute(GeneralDBType.String);
            simplePropertyAttribute0.Description = "OO限定方案关联的服务接口对应的查询方法，不可为空";
            MethodNameProperty = DefaultType.RegisterSimpleProperty("MethodName", typeof(string), null, false, new Attribute[] {
                        simplePropertyAttribute0});
            // InterfaceTypeName
            SimplePropertyAttribute simplePropertyAttribute1 = new SimplePropertyAttribute(GeneralDBType.String);
            simplePropertyAttribute1.Description = "OO限定方案关联的服务接口类型全名称，不可为空";
            InterfaceTypeNameProperty = DefaultType.RegisterSimpleProperty("InterfaceTypeName", typeof(string), null, false, new Attribute[] {
                        simplePropertyAttribute1});
        }
        
        /// <summary>
        /// 构造函数
        /// </summary>
        public QueryProjectOOElement() : 
                base() {
            this.InitializeView();
        }
        
        /// <summary>
        /// 构造函数
        /// </summary>
        public QueryProjectOOElement(DependencyObject obj) : 
                base(obj) {
            this.InitializeView();
        }
        
        /// <summary>
        /// OO限定方案关联的服务接口对应的查询方法，不可为空
        /// </summary>
        public string MethodName {
            get {
                return ((string)(this.DependencyObject[QueryProjectOOElement.MethodNameProperty]));
            }
            set {
                this.DependencyObject[QueryProjectOOElement.MethodNameProperty] = value;
            }
        }
        
        /// <summary>
        /// OO限定方案关联的服务接口类型全名称，不可为空
        /// </summary>
        public string InterfaceTypeName {
            get {
                return ((string)(this.DependencyObject[QueryProjectOOElement.InterfaceTypeNameProperty]));
            }
            set {
                this.DependencyObject[QueryProjectOOElement.InterfaceTypeNameProperty] = value;
            }
        }
        
        /// <summary>
        /// 限定方案Id，主键，不可为空，同一TypeKey或同一存储文件内不能重复
        /// </summary>
        public string Id {
            get {
                return ((string)(this.DependencyObject[QueryProjectBaseElement.IdProperty]));
            }
            set {
                this.DependencyObject[QueryProjectBaseElement.IdProperty] = value;
            }
        }
        
        /// <summary>
        /// 限定方案的起始位置，用实体的完整路径表示，如OrderSheet.Details。
        /// </summary>
        public string QueryEntity {
            get {
                return ((string)(this.DependencyObject[QueryProjectBaseElement.QueryEntityProperty]));
            }
            set {
                this.DependencyObject[QueryProjectBaseElement.QueryEntityProperty] = value;
            }
        }
        
        /// <summary>
        /// 限定方案的上下文字段列名.
        /// </summary>
        public string ContextDataColumn {
            get {
                return ((string)(this.DependencyObject[QueryProjectBaseElement.ContextDataColumnProperty]));
            }
            set {
                this.DependencyObject[QueryProjectBaseElement.ContextDataColumnProperty] = value;
            }
        }
        
        /// <summary>
        /// 限定方案是否为系统级别
        /// </summary>
        public bool IsSystem {
            get {
                return ((bool)(this.DependencyObject[QueryProjectBaseElement.IsSystemProperty]));
            }
            set {
                this.DependencyObject[QueryProjectBaseElement.IsSystemProperty] = value;
            }
        }
        
        /// <summary>
        /// 限定方案是否为公用级别
        /// </summary>
        public bool IsPublic {
            get {
                return ((bool)(this.DependencyObject[QueryProjectBaseElement.IsPublicProperty]));
            }
            set {
                this.DependencyObject[QueryProjectBaseElement.IsPublicProperty] = value;
            }
        }
        
        /// <summary>
        /// 限定方案显示的名称，不可为空
        /// </summary>
        public string DisplayName {
            get {
                return ((string)(this.DependencyObject[QueryProjectBaseElement.DisplayNameProperty]));
            }
            set {
                this.DependencyObject[QueryProjectBaseElement.DisplayNameProperty] = value;
            }
        }
        
        /// <summary>
        /// 限定方案在浏览界面上显示的工具栏提示信息
        /// </summary>
        public string Description {
            get {
                return ((string)(this.DependencyObject[QueryProjectBaseElement.DescriptionProperty]));
            }
            set {
                this.DependencyObject[QueryProjectBaseElement.DescriptionProperty] = value;
            }
        }
        
        /// <summary>
        /// 限定方案类型，分为两种：一种是绑定到下拉列表上（Select）；一种是绑定在普通浏览界面上（Browse）,不可为空
        /// </summary>
        public string ProjectType {
            get {
                return ((string)(this.DependencyObject[QueryProjectBaseElement.ProjectTypeProperty]));
            }
            set {
                this.DependencyObject[QueryProjectBaseElement.ProjectTypeProperty] = value;
            }
        }
        
        /// <summary>
        /// 限定方案上从左至右的可缩排列数
        /// </summary>
        public int IndentColumnCount {
            get {
                return ((int)(this.DependencyObject[QueryProjectBaseElement.IndentColumnCountProperty]));
            }
            set {
                this.DependencyObject[QueryProjectBaseElement.IndentColumnCountProperty] = value;
            }
        }
        
        /// <summary>
        /// 限定方案对应的EditorView的SubName，默认为null则调用平台提供的默认EditorView
        /// </summary>
        public string EditorViewName {
            get {
                return ((string)(this.DependencyObject[QueryProjectBaseElement.EditorViewNameProperty]));
            }
            set {
                this.DependencyObject[QueryProjectBaseElement.EditorViewNameProperty] = value;
            }
        }
        
        /// <summary>
        /// 限定方案的顺序号
        /// </summary>
        public int Sequence {
            get {
                return ((int)(this.DependencyObject[QueryProjectBaseElement.SequenceProperty]));
            }
            set {
                this.DependencyObject[QueryProjectBaseElement.SequenceProperty] = value;
            }
        }
        
        /// <summary>
        /// 查询列的集合
        /// </summary>
        public DependencyObjectCollectionView<QueryViewColumnElement> QueryViewColumns {
            get {
                return _queryViewColumns.Value;
            }
        }
        
        /// <summary>
        /// 条件格式的集合
        /// </summary>
        public DependencyObjectCollectionView<QueryConditionFormatElement> QueryConditionFormats {
            get {
                return _queryConditionFormats.Value;
            }
        }
        
        private void InitializeView() {
            _queryViewColumns = this.RegisterCollectionViewPtr<QueryViewColumnElement>(QueryProjectBaseElement.QueryViewColumnsProperty);
            _queryConditionFormats = this.RegisterCollectionViewPtr<QueryConditionFormatElement>(QueryProjectBaseElement.QueryConditionFormatsProperty);
        }
    }
}
namespace System.Configuration.Core.Tests {
    using System;
    using System.Collections.Generic;



    
    
    /// <summary>
    /// 限定方案的参数定义
    /// </summary>
    [DataEntityRegisterAttribute()]
    sealed class ParameterElement : DependencyObjectView {
        
        /// <summary>
        /// 参数名称
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty NameProperty;
        
        /// <summary>
        /// 参数类型，对应GeneralDBType
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty DataTypeProperty;
        
        /// <summary>
        /// DefaultType
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyObjectType DefaultType;
        
        /// <summary>
        /// 构造函数
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1810:InitializeReferenceTypeStaticFieldsInline")]
        static ParameterElement() {
            // DefaultType
            DefaultType = new DependencyObjectType("ParameterElement");
            // Name
            SimplePropertyAttribute simplePropertyAttribute0 = new SimplePropertyAttribute(GeneralDBType.String);
            simplePropertyAttribute0.Description = "参数名称";
            NameProperty = DefaultType.RegisterSimpleProperty("Name", typeof(string), null, false, new Attribute[] {
                        simplePropertyAttribute0});
            // DataType
            SimplePropertyAttribute simplePropertyAttribute1 = new SimplePropertyAttribute(GeneralDBType.String);
            simplePropertyAttribute1.Description = "参数类型，对应GeneralDBType";
            DataTypeProperty = DefaultType.RegisterSimpleProperty("DataType", typeof(string), "String", false, new Attribute[] {
                        simplePropertyAttribute1});
        }
        
        /// <summary>
        /// 构造函数
        /// </summary>
        public ParameterElement() : 
                base() {
        }
        
        /// <summary>
        /// 构造函数
        /// </summary>
        public ParameterElement(DependencyObject obj) : 
                base(obj) {
        }
        
        /// <summary>
        /// 参数名称
        /// </summary>
        public string Name {
            get {
                return ((string)(this.DependencyObject[ParameterElement.NameProperty]));
            }
            set {
                this.DependencyObject[ParameterElement.NameProperty] = value;
            }
        }
        
        /// <summary>
        /// 参数类型，对应GeneralDBType
        /// </summary>
        public string DataType {
            get {
                return ((string)(this.DependencyObject[ParameterElement.DataTypeProperty]));
            }
            set {
                this.DependencyObject[ParameterElement.DataTypeProperty] = value;
            }
        }
    }
}
namespace System.Configuration.Core.Tests {
    using System;
    using System.Collections.Generic;



    
    
    /// <summary>
    /// 查询视图中的数据列定义，对应所要查询的数据库字段
    /// </summary>
    [DataEntityRegisterAttribute()]
    sealed class QueryViewColumnElement : DependencyObjectView {
        
        /// <summary>
        /// 查询视图内所含数据列的显示名称，对应到表格中的Caption
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty DisplayNameProperty;
        
        /// <summary>
        /// 查询视图内所含数据列的数据类型 ,GeneralDBType类型，根据PropertyPath对应的实体属性默认带值
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty DataTypeProperty;
        
        /// <summary>
        /// 查询视图内所含数据列的描述
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty DescriptionProperty;
        
        /// <summary>
        /// 查询视图内所含数据列在浏览时显示的宽度，默认100
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty WidthProperty;
        
        /// <summary>
        /// 查询视图内所含数据列在浏览时显示的宽度是否自动设置，默认false
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty AutoWidthProperty;
        
        /// <summary>
        /// 查询视图内所含数据列的数据在浏览时对齐的方式，类型为System.Windows.Forms.HorizontalAlignment，默认Left
        /// </summary>
        /// <remarks>
        /// 详细信息请参见<see cref="System.Windows.Forms.HorizontalAlignment"/>
        /// </remarks>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty AlignProperty;
        
        /// <summary>
        /// 查询视图内所含数据列是否可见，默认为true。
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty VisibleProperty;
        
        /// <summary>
        /// 用于可见性运算的Lambda表达式，默认为null。
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty VisibleExpressionProperty;
        
        /// <summary>
        /// 查询视图内所含数据列是否总是可以被浏览（是否总是包含在SQL中）,最终是否包含在SQL中，由(Visible and IsBrowsable)确定，默认为false。
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty IsBrowsableProperty;
        
        /// <summary>
        /// 查询视图内所含数据列的序号,设计时需要赋值
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty ColumnSequenceProperty;
        
        /// <summary>
        /// 数据列的显示格式，格式化字符串，如p2
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty FormatStringProperty;
        
        /// <summary>
        /// 自定义格式化字符串，用于处理数值日期自定义格式显示
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty CustomFormatProperty;
        
        /// <summary>
        /// CustomFormat是否为脚本
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty CustomFormatIsExpressionProperty;
        
        /// <summary>
        /// 查询视图中数据列数据的排序方式，可选的值包括： None（不排序），Asc（升序），Desc（降序），默认None
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty SortProperty;
        
        /// <summary>
        /// 查询视图中数据列数据的排序顺序，设计时如果Sort不为None，需要赋值
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty SortSequenceProperty;
        
        /// <summary>
        /// 查询视图中数据列的固定位置，可选的值包括：None，Left，Right，默认None
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty FixedProperty;
        
        /// <summary>
        /// 查询视图中数据列需要在相同数据情况下进行合并，默认false。此属性已过时，请用限定方案上的 MergeColumnName属性
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty MergeProperty;
        
        /// <summary>
        /// 文本内容是否自动折行显示（自动调整行高)，字段为文本和字符串类型时才有效
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty AutoHeightProperty;
        
        /// <summary>
        /// 查询列的别名,如果Column对应PropertyValue,可以在设计时自动带出（如未设定,默认规则:将属性路径中的.替换为_,如CustomerId.Name替换为CustomerId_Name），其他情况必须手工设定，Alias不能重复
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty AliasProperty;
        
        /// <summary>
        /// 查询列
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty ColumnProperty;
        
        /// <summary>
        /// 列上的编辑器
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty EditorProperty;
        
        /// <summary>
        /// 浏览显示的图标的集合
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty ImageListProperty;
        
        /// <summary>
        /// DefaultType
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyObjectType DefaultType;
        
        private CachedViewPtr<ValueBaseElement> _column;
        
        private CachedViewPtr<AbstractColumnEditorElement> _editor;
        
        private CachedViewPtr<DependencyObjectCollectionView<ImageElement>> _imageList;
        
        /// <summary>
        /// 构造函数
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1810:InitializeReferenceTypeStaticFieldsInline")]
        static QueryViewColumnElement() {
            // DefaultType
            DefaultType = new DependencyObjectType("QueryViewColumnElement", new Attribute[] {
                        new DataEntityAttribute("Alias")});
            // DisplayName
            SimplePropertyAttribute simplePropertyAttribute0 = new SimplePropertyAttribute(GeneralDBType.String);
            simplePropertyAttribute0.Description = "查询视图内所含数据列的显示名称，对应到表格中的Caption";
            simplePropertyAttribute0.IsLocalizable = true;
            DisplayNameProperty = DefaultType.RegisterSimpleProperty("DisplayName", typeof(string), null, false, new Attribute[] {
                        simplePropertyAttribute0});
            // DataType
            SimplePropertyAttribute simplePropertyAttribute1 = new SimplePropertyAttribute(GeneralDBType.String);
            simplePropertyAttribute1.Description = "查询视图内所含数据列的数据类型 ,GeneralDBType类型，根据PropertyPath对应的实体属性默认带值";
            DataTypeProperty = DefaultType.RegisterSimpleProperty("DataType", typeof(string), "String", false, new Attribute[] {
                        simplePropertyAttribute1});
            // Description
            SimplePropertyAttribute simplePropertyAttribute2 = new SimplePropertyAttribute(GeneralDBType.String);
            simplePropertyAttribute2.Description = "查询视图内所含数据列的描述";
            simplePropertyAttribute2.IsLocalizable = true;
            DescriptionProperty = DefaultType.RegisterSimpleProperty("Description", typeof(string), null, false, new Attribute[] {
                        simplePropertyAttribute2});
            // Width
            SimplePropertyAttribute simplePropertyAttribute3 = new SimplePropertyAttribute(GeneralDBType.Int32);
            simplePropertyAttribute3.Description = "查询视图内所含数据列在浏览时显示的宽度，默认100";
            WidthProperty = DefaultType.RegisterSimpleProperty("Width", typeof(int), 100, false, new Attribute[] {
                        simplePropertyAttribute3});
            // AutoWidth
            SimplePropertyAttribute simplePropertyAttribute4 = new SimplePropertyAttribute(GeneralDBType.Boolean);
            simplePropertyAttribute4.Description = "查询视图内所含数据列在浏览时显示的宽度是否自动设置，默认false";
            AutoWidthProperty = DefaultType.RegisterSimpleProperty("AutoWidth", typeof(bool), false, false, new Attribute[] {
                        simplePropertyAttribute4});
            // Align
            SimplePropertyAttribute simplePropertyAttribute5 = new SimplePropertyAttribute(GeneralDBType.String);
            simplePropertyAttribute5.Description = "查询视图内所含数据列的数据在浏览时对齐的方式，类型为System.Windows.Forms.HorizontalAlignment，默认Left";
            AlignProperty = DefaultType.RegisterSimpleProperty("Align", typeof(string), "Left", false, new Attribute[] {
                        simplePropertyAttribute5});
            // Visible
            SimplePropertyAttribute simplePropertyAttribute6 = new SimplePropertyAttribute(GeneralDBType.Boolean);
            simplePropertyAttribute6.Description = "查询视图内所含数据列是否可见，默认为true。";
            VisibleProperty = DefaultType.RegisterSimpleProperty("Visible", typeof(bool), true, false, new Attribute[] {
                        simplePropertyAttribute6});
            // VisibleExpression
            SimplePropertyAttribute simplePropertyAttribute7 = new SimplePropertyAttribute(GeneralDBType.String);
            simplePropertyAttribute7.Description = "用于可见性运算的Lambda表达式，默认为null。";
            VisibleExpressionProperty = DefaultType.RegisterSimpleProperty("VisibleExpression", typeof(string), null, false, new Attribute[] {
                        simplePropertyAttribute7});
            // IsBrowsable
            SimplePropertyAttribute simplePropertyAttribute8 = new SimplePropertyAttribute(GeneralDBType.Boolean);
            simplePropertyAttribute8.Description = "查询视图内所含数据列是否总是可以被浏览（是否总是包含在SQL中）,最终是否包含在SQL中，由(Visible and IsBrowsable)确定，默认为fals" +
                "e。";
            IsBrowsableProperty = DefaultType.RegisterSimpleProperty("IsBrowsable", typeof(bool), false, false, new Attribute[] {
                        simplePropertyAttribute8});
            // ColumnSequence
            SimplePropertyAttribute simplePropertyAttribute9 = new SimplePropertyAttribute(GeneralDBType.Int32);
            simplePropertyAttribute9.Description = "查询视图内所含数据列的序号,设计时需要赋值";
            ColumnSequenceProperty = DefaultType.RegisterSimpleProperty("ColumnSequence", typeof(int), null, false, new Attribute[] {
                        simplePropertyAttribute9});
            // FormatString
            SimplePropertyAttribute simplePropertyAttribute10 = new SimplePropertyAttribute(GeneralDBType.String);
            simplePropertyAttribute10.Description = "数据列的显示格式，格式化字符串，如p2";
            FormatStringProperty = DefaultType.RegisterSimpleProperty("FormatString", typeof(string), null, false, new Attribute[] {
                        simplePropertyAttribute10});
            // CustomFormat
            SimplePropertyAttribute simplePropertyAttribute11 = new SimplePropertyAttribute(GeneralDBType.String);
            simplePropertyAttribute11.Description = "自定义格式化字符串，用于处理数值日期自定义格式显示";
            CustomFormatProperty = DefaultType.RegisterSimpleProperty("CustomFormat", typeof(string), null, false, new Attribute[] {
                        simplePropertyAttribute11});
            // CustomFormatIsExpression
            SimplePropertyAttribute simplePropertyAttribute12 = new SimplePropertyAttribute(GeneralDBType.Boolean);
            simplePropertyAttribute12.Description = "CustomFormat是否为脚本";
            CustomFormatIsExpressionProperty = DefaultType.RegisterSimpleProperty("CustomFormatIsExpression", typeof(bool), false, false, new Attribute[] {
                        simplePropertyAttribute12});
            // Sort
            SimplePropertyAttribute simplePropertyAttribute13 = new SimplePropertyAttribute(GeneralDBType.String);
            simplePropertyAttribute13.Description = "查询视图中数据列数据的排序方式，可选的值包括： None（不排序），Asc（升序），Desc（降序），默认None";
            SortProperty = DefaultType.RegisterSimpleProperty("Sort", typeof(string), "None", false, new Attribute[] {
                        simplePropertyAttribute13});
            // SortSequence
            SimplePropertyAttribute simplePropertyAttribute14 = new SimplePropertyAttribute(GeneralDBType.Int32);
            simplePropertyAttribute14.Description = "查询视图中数据列数据的排序顺序，设计时如果Sort不为None，需要赋值";
            SortSequenceProperty = DefaultType.RegisterSimpleProperty("SortSequence", typeof(int), null, false, new Attribute[] {
                        simplePropertyAttribute14});
            // Fixed
            SimplePropertyAttribute simplePropertyAttribute15 = new SimplePropertyAttribute(GeneralDBType.String);
            simplePropertyAttribute15.Description = "查询视图中数据列的固定位置，可选的值包括：None，Left，Right，默认None";
            FixedProperty = DefaultType.RegisterSimpleProperty("Fixed", typeof(string), "None", false, new Attribute[] {
                        simplePropertyAttribute15});
            // Merge
            SimplePropertyAttribute simplePropertyAttribute16 = new SimplePropertyAttribute(GeneralDBType.Boolean);
            simplePropertyAttribute16.Description = "查询视图中数据列需要在相同数据情况下进行合并，默认false。此属性已过时，请用限定方案上的 MergeColumnName属性";
            MergeProperty = DefaultType.RegisterSimpleProperty("Merge", typeof(bool), false, false, new Attribute[] {
                        simplePropertyAttribute16});
            // AutoHeight
            SimplePropertyAttribute simplePropertyAttribute17 = new SimplePropertyAttribute(GeneralDBType.Boolean);
            simplePropertyAttribute17.Description = "文本内容是否自动折行显示（自动调整行高)，字段为文本和字符串类型时才有效";
            AutoHeightProperty = DefaultType.RegisterSimpleProperty("AutoHeight", typeof(bool), false, false, new Attribute[] {
                        simplePropertyAttribute17});
            // Alias
            SimplePropertyAttribute simplePropertyAttribute18 = new SimplePropertyAttribute(GeneralDBType.String);
            simplePropertyAttribute18.Description = "查询列的别名,如果Column对应PropertyValue,可以在设计时自动带出（如未设定,默认规则:将属性路径中的.替换为_,如CustomerId.Name" +
                "替换为CustomerId_Name），其他情况必须手工设定，Alias不能重复";
            AliasProperty = DefaultType.RegisterSimpleProperty("Alias", typeof(string), null, false, new Attribute[] {
                        simplePropertyAttribute18});
            // Column
            ComplexPropertyAttribute complexPropertyAttribute0 = new ComplexPropertyAttribute();
            complexPropertyAttribute0.Description = "查询列";
            ColumnProperty = DefaultType.RegisterComplexProperty("Column", ValueBaseElement.DefaultType, false, new Attribute[] {
                        complexPropertyAttribute0});
            // Editor
            ComplexPropertyAttribute complexPropertyAttribute1 = new ComplexPropertyAttribute();
            complexPropertyAttribute1.Description = "列上的编辑器";
            EditorProperty = DefaultType.RegisterComplexProperty("Editor", AbstractColumnEditorElement.DefaultType, false, new Attribute[] {
                        complexPropertyAttribute1});
            // ImageList
            CollectionPropertyAttribute collectionPropertyAttribute0 = new CollectionPropertyAttribute(typeof(DependencyObject));
            collectionPropertyAttribute0.Description = "浏览显示的图标的集合";
            ImageListProperty = DefaultType.RegisterCollectionProperty("ImageList", ImageElement.DefaultType, true, new Attribute[] {
                        collectionPropertyAttribute0});
        }
        
        /// <summary>
        /// 构造函数
        /// </summary>
        public QueryViewColumnElement() : 
                base() {
            this.InitializeView();
        }
        
        /// <summary>
        /// 构造函数
        /// </summary>
        public QueryViewColumnElement(DependencyObject obj) : 
                base(obj) {
            this.InitializeView();
        }
        
        /// <summary>
        /// 查询视图内所含数据列的显示名称，对应到表格中的Caption
        /// </summary>
        public string DisplayName {
            get {
                return ((string)(this.DependencyObject[QueryViewColumnElement.DisplayNameProperty]));
            }
            set {
                this.DependencyObject[QueryViewColumnElement.DisplayNameProperty] = value;
            }
        }
        
        /// <summary>
        /// 查询视图内所含数据列的数据类型 ,GeneralDBType类型，根据PropertyPath对应的实体属性默认带值
        /// </summary>
        public string DataType {
            get {
                return ((string)(this.DependencyObject[QueryViewColumnElement.DataTypeProperty]));
            }
            set {
                this.DependencyObject[QueryViewColumnElement.DataTypeProperty] = value;
            }
        }
        
        /// <summary>
        /// 查询视图内所含数据列的描述
        /// </summary>
        public string Description {
            get {
                return ((string)(this.DependencyObject[QueryViewColumnElement.DescriptionProperty]));
            }
            set {
                this.DependencyObject[QueryViewColumnElement.DescriptionProperty] = value;
            }
        }
        
        /// <summary>
        /// 查询视图内所含数据列在浏览时显示的宽度，默认100
        /// </summary>
        public int Width {
            get {
                return ((int)(this.DependencyObject[QueryViewColumnElement.WidthProperty]));
            }
            set {
                this.DependencyObject[QueryViewColumnElement.WidthProperty] = value;
            }
        }
        
        /// <summary>
        /// 查询视图内所含数据列在浏览时显示的宽度是否自动设置，默认false
        /// </summary>
        public bool AutoWidth {
            get {
                return ((bool)(this.DependencyObject[QueryViewColumnElement.AutoWidthProperty]));
            }
            set {
                this.DependencyObject[QueryViewColumnElement.AutoWidthProperty] = value;
            }
        }
        
        /// <summary>
        /// 查询视图内所含数据列的数据在浏览时对齐的方式，类型为System.Windows.Forms.HorizontalAlignment，默认Left
        /// </summary>
        /// <remarks>
        /// 详细信息请参见<see cref="System.Windows.Forms.HorizontalAlignment"/>
        /// </remarks>
        public string Align {
            get {
                return ((string)(this.DependencyObject[QueryViewColumnElement.AlignProperty]));
            }
            set {
                this.DependencyObject[QueryViewColumnElement.AlignProperty] = value;
            }
        }
        
        /// <summary>
        /// 查询视图内所含数据列是否可见，默认为true。
        /// </summary>
        public bool Visible {
            get {
                return ((bool)(this.DependencyObject[QueryViewColumnElement.VisibleProperty]));
            }
            set {
                this.DependencyObject[QueryViewColumnElement.VisibleProperty] = value;
            }
        }
        
        /// <summary>
        /// 用于可见性运算的Lambda表达式，默认为null。
        /// </summary>
        public string VisibleExpression {
            get {
                return ((string)(this.DependencyObject[QueryViewColumnElement.VisibleExpressionProperty]));
            }
            set {
                this.DependencyObject[QueryViewColumnElement.VisibleExpressionProperty] = value;
            }
        }
        
        /// <summary>
        /// 查询视图内所含数据列是否总是可以被浏览（是否总是包含在SQL中）,最终是否包含在SQL中，由(Visible and IsBrowsable)确定，默认为false。
        /// </summary>
        public bool IsBrowsable {
            get {
                return ((bool)(this.DependencyObject[QueryViewColumnElement.IsBrowsableProperty]));
            }
            set {
                this.DependencyObject[QueryViewColumnElement.IsBrowsableProperty] = value;
            }
        }
        
        /// <summary>
        /// 查询视图内所含数据列的序号,设计时需要赋值
        /// </summary>
        public int ColumnSequence {
            get {
                return ((int)(this.DependencyObject[QueryViewColumnElement.ColumnSequenceProperty]));
            }
            set {
                this.DependencyObject[QueryViewColumnElement.ColumnSequenceProperty] = value;
            }
        }
        
        /// <summary>
        /// 数据列的显示格式，格式化字符串，如p2
        /// </summary>
        public string FormatString {
            get {
                return ((string)(this.DependencyObject[QueryViewColumnElement.FormatStringProperty]));
            }
            set {
                this.DependencyObject[QueryViewColumnElement.FormatStringProperty] = value;
            }
        }
        
        /// <summary>
        /// 自定义格式化字符串，用于处理数值日期自定义格式显示
        /// </summary>
        public string CustomFormat {
            get {
                return ((string)(this.DependencyObject[QueryViewColumnElement.CustomFormatProperty]));
            }
            set {
                this.DependencyObject[QueryViewColumnElement.CustomFormatProperty] = value;
            }
        }
        
        /// <summary>
        /// CustomFormat是否为脚本
        /// </summary>
        public bool CustomFormatIsExpression {
            get {
                return ((bool)(this.DependencyObject[QueryViewColumnElement.CustomFormatIsExpressionProperty]));
            }
            set {
                this.DependencyObject[QueryViewColumnElement.CustomFormatIsExpressionProperty] = value;
            }
        }
        
        /// <summary>
        /// 查询视图中数据列数据的排序方式，可选的值包括： None（不排序），Asc（升序），Desc（降序），默认None
        /// </summary>
        public string Sort {
            get {
                return ((string)(this.DependencyObject[QueryViewColumnElement.SortProperty]));
            }
            set {
                this.DependencyObject[QueryViewColumnElement.SortProperty] = value;
            }
        }
        
        /// <summary>
        /// 查询视图中数据列数据的排序顺序，设计时如果Sort不为None，需要赋值
        /// </summary>
        public int SortSequence {
            get {
                return ((int)(this.DependencyObject[QueryViewColumnElement.SortSequenceProperty]));
            }
            set {
                this.DependencyObject[QueryViewColumnElement.SortSequenceProperty] = value;
            }
        }
        
        /// <summary>
        /// 查询视图中数据列的固定位置，可选的值包括：None，Left，Right，默认None
        /// </summary>
        public string Fixed {
            get {
                return ((string)(this.DependencyObject[QueryViewColumnElement.FixedProperty]));
            }
            set {
                this.DependencyObject[QueryViewColumnElement.FixedProperty] = value;
            }
        }
        
        /// <summary>
        /// 查询视图中数据列需要在相同数据情况下进行合并，默认false。此属性已过时，请用限定方案上的 MergeColumnName属性
        /// </summary>
        public bool Merge {
            get {
                return ((bool)(this.DependencyObject[QueryViewColumnElement.MergeProperty]));
            }
            set {
                this.DependencyObject[QueryViewColumnElement.MergeProperty] = value;
            }
        }
        
        /// <summary>
        /// 文本内容是否自动折行显示（自动调整行高)，字段为文本和字符串类型时才有效
        /// </summary>
        public bool AutoHeight {
            get {
                return ((bool)(this.DependencyObject[QueryViewColumnElement.AutoHeightProperty]));
            }
            set {
                this.DependencyObject[QueryViewColumnElement.AutoHeightProperty] = value;
            }
        }
        
        /// <summary>
        /// 查询列的别名,如果Column对应PropertyValue,可以在设计时自动带出（如未设定,默认规则:将属性路径中的.替换为_,如CustomerId.Name替换为CustomerId_Name），其他情况必须手工设定，Alias不能重复
        /// </summary>
        public string Alias {
            get {
                return ((string)(this.DependencyObject[QueryViewColumnElement.AliasProperty]));
            }
            set {
                this.DependencyObject[QueryViewColumnElement.AliasProperty] = value;
            }
        }
        
        /// <summary>
        /// 查询列
        /// </summary>
        public ValueBaseElement Column {
            get {
                return _column.Value;
            }
        }
        
        /// <summary>
        /// 列上的编辑器
        /// </summary>
        public AbstractColumnEditorElement Editor {
            get {
                return _editor.Value;
            }
        }
        
        /// <summary>
        /// 浏览显示的图标的集合
        /// </summary>
        public DependencyObjectCollectionView<ImageElement> ImageList {
            get {
                return _imageList.Value;
            }
        }
        
        private void InitializeView() {
            _column = this.RegisterComplexViewPtr<ValueBaseElement>(QueryViewColumnElement.ColumnProperty);
            _editor = this.RegisterComplexViewPtr<AbstractColumnEditorElement>(QueryViewColumnElement.EditorProperty);
            _imageList = this.RegisterCollectionViewPtr<ImageElement>(QueryViewColumnElement.ImageListProperty);
        }
    }
}
namespace System.Configuration.Core.Tests {
    using System;
    using System.Collections.Generic;



    
    
    /// <summary>
    /// PickList Column编辑器
    /// </summary>
    [DataEntityRegisterAttribute()]
    sealed class PickListLookUpElement : DependencyObjectView {
        
        /// <summary>
        /// 设置PickList列的实体名称
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty PickListTypeNameProperty;
        
        /// <summary>
        /// 设置PickList列是否显示PickList的内含Id值。默认false。
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty IsDisplayIdProperty;
        
        /// <summary>
        /// 值列表,以逗号分隔。保存PickListId
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty ValueListProperty;
        
        /// <summary>
        /// DefaultType
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyObjectType DefaultType;
        
        /// <summary>
        /// 构造函数
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1810:InitializeReferenceTypeStaticFieldsInline")]
        static PickListLookUpElement() {
            // DefaultType
            DefaultType = new DependencyObjectType("PickListLookUpElement");
            DefaultType.RegisterBaseType(AbstractColumnEditorElement.DefaultType);
            // PickListTypeName
            SimplePropertyAttribute simplePropertyAttribute0 = new SimplePropertyAttribute(GeneralDBType.String);
            simplePropertyAttribute0.Description = "设置PickList列的实体名称";
            PickListTypeNameProperty = DefaultType.RegisterSimpleProperty("PickListTypeName", typeof(string), null, false, new Attribute[] {
                        simplePropertyAttribute0});
            // IsDisplayId
            SimplePropertyAttribute simplePropertyAttribute1 = new SimplePropertyAttribute(GeneralDBType.Boolean);
            simplePropertyAttribute1.Description = "设置PickList列是否显示PickList的内含Id值。默认false。";
            IsDisplayIdProperty = DefaultType.RegisterSimpleProperty("IsDisplayId", typeof(bool), false, false, new Attribute[] {
                        simplePropertyAttribute1});
            // ValueList
            SimplePropertyAttribute simplePropertyAttribute2 = new SimplePropertyAttribute(GeneralDBType.String);
            simplePropertyAttribute2.Description = "值列表,以逗号分隔。保存PickListId";
            ValueListProperty = DefaultType.RegisterSimpleProperty("ValueList", typeof(string), null, false, new Attribute[] {
                        simplePropertyAttribute2});
        }
        
        /// <summary>
        /// 构造函数
        /// </summary>
        public PickListLookUpElement() : 
                base() {
        }
        
        /// <summary>
        /// 构造函数
        /// </summary>
        public PickListLookUpElement(DependencyObject obj) : 
                base(obj) {
        }
        
        /// <summary>
        /// 设置PickList列的实体名称
        /// </summary>
        public string PickListTypeName {
            get {
                return ((string)(this.DependencyObject[PickListLookUpElement.PickListTypeNameProperty]));
            }
            set {
                this.DependencyObject[PickListLookUpElement.PickListTypeNameProperty] = value;
            }
        }
        
        /// <summary>
        /// 设置PickList列是否显示PickList的内含Id值。默认false。
        /// </summary>
        public bool IsDisplayId {
            get {
                return ((bool)(this.DependencyObject[PickListLookUpElement.IsDisplayIdProperty]));
            }
            set {
                this.DependencyObject[PickListLookUpElement.IsDisplayIdProperty] = value;
            }
        }
        
        /// <summary>
        /// 值列表,以逗号分隔。保存PickListId
        /// </summary>
        public string ValueList {
            get {
                return ((string)(this.DependencyObject[PickListLookUpElement.ValueListProperty]));
            }
            set {
                this.DependencyObject[PickListLookUpElement.ValueListProperty] = value;
            }
        }
        
        /// <summary>
        /// 编辑器的名称， 主键，不可空白
        /// </summary>
        public string Name {
            get {
                return ((string)(this.DependencyObject[AbstractColumnEditorElement.NameProperty]));
            }
            set {
                this.DependencyObject[AbstractColumnEditorElement.NameProperty] = value;
            }
        }
        
        /// <summary>
        /// 列所能输入的最大长度
        /// </summary>
        public int MaxLength {
            get {
                return ((int)(this.DependencyObject[AbstractColumnEditorElement.MaxLengthProperty]));
            }
            set {
                this.DependencyObject[AbstractColumnEditorElement.MaxLengthProperty] = value;
            }
        }
    }
}
namespace System.Configuration.Core.Tests {
    using System;
    using System.Collections.Generic;



    
    
    /// <summary>
    /// 浏览显示的图标，根据数据值的不同可显示不同图标
    /// </summary>
    [DataEntityRegisterAttribute()]
    sealed class ImageElement : DependencyObjectView {
        
        /// <summary>
        /// 显示的图标Id，主键，所在集合内不能重复
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty ImageIdProperty;
        
        /// <summary>
        /// 字段数值，当数据值与设置的值相等时会应用相应的图标
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty FieldValueProperty;
        
        /// <summary>
        /// 查找图标的键值，图片的相对路径
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty ImageKeyProperty;
        
        /// <summary>
        /// DefaultType
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyObjectType DefaultType;
        
        /// <summary>
        /// 构造函数
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1810:InitializeReferenceTypeStaticFieldsInline")]
        static ImageElement() {
            // DefaultType
            DefaultType = new DependencyObjectType("ImageElement", new Attribute[] {
                        new DataEntityAttribute("ImageId")});
            // ImageId
            SimplePropertyAttribute simplePropertyAttribute0 = new SimplePropertyAttribute(GeneralDBType.String);
            simplePropertyAttribute0.Description = "显示的图标Id，主键，所在集合内不能重复";
            ImageIdProperty = DefaultType.RegisterSimpleProperty("ImageId", typeof(string), null, false, new Attribute[] {
                        simplePropertyAttribute0});
            // FieldValue
            SimplePropertyAttribute simplePropertyAttribute1 = new SimplePropertyAttribute(GeneralDBType.String);
            simplePropertyAttribute1.Description = "字段数值，当数据值与设置的值相等时会应用相应的图标";
            FieldValueProperty = DefaultType.RegisterSimpleProperty("FieldValue", typeof(string), null, false, new Attribute[] {
                        simplePropertyAttribute1});
            // ImageKey
            SimplePropertyAttribute simplePropertyAttribute2 = new SimplePropertyAttribute(GeneralDBType.String);
            simplePropertyAttribute2.Description = "查找图标的键值，图片的相对路径";
            ImageKeyProperty = DefaultType.RegisterSimpleProperty("ImageKey", typeof(string), null, false, new Attribute[] {
                        simplePropertyAttribute2});
        }
        
        /// <summary>
        /// 构造函数
        /// </summary>
        public ImageElement() : 
                base() {
        }
        
        /// <summary>
        /// 构造函数
        /// </summary>
        public ImageElement(DependencyObject obj) : 
                base(obj) {
        }
        
        /// <summary>
        /// 显示的图标Id，主键，所在集合内不能重复
        /// </summary>
        public string ImageId {
            get {
                return ((string)(this.DependencyObject[ImageElement.ImageIdProperty]));
            }
            set {
                this.DependencyObject[ImageElement.ImageIdProperty] = value;
            }
        }
        
        /// <summary>
        /// 字段数值，当数据值与设置的值相等时会应用相应的图标
        /// </summary>
        public string FieldValue {
            get {
                return ((string)(this.DependencyObject[ImageElement.FieldValueProperty]));
            }
            set {
                this.DependencyObject[ImageElement.FieldValueProperty] = value;
            }
        }
        
        /// <summary>
        /// 查找图标的键值，图片的相对路径
        /// </summary>
        public string ImageKey {
            get {
                return ((string)(this.DependencyObject[ImageElement.ImageKeyProperty]));
            }
            set {
                this.DependencyObject[ImageElement.ImageKeyProperty] = value;
            }
        }
    }
}
namespace System.Configuration.Core.Tests {
    using System;
    using System.Collections.Generic;



    
    
    /// <summary>
    /// 条件格式，用于当某个条件成立时，设置表格的显示样式
    /// </summary>
    [DataEntityRegisterAttribute()]
    sealed class QueryConditionFormatElement : DependencyObjectView {
        
        /// <summary>
        /// 条件格式Id，主键，同一集合内不能重复，不可为空
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty ConditionFormatIdProperty;
        
        /// <summary>
        /// 条件格式名称，不可为空
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty NameProperty;
        
        /// <summary>
        /// 条件表达式，当该表达式成立时应用样式
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty ConditionExpressionProperty;
        
        /// <summary>
        /// 该格式是否应用到整行，默认false
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty IsApplyToRowProperty;
        
        /// <summary>
        /// 样式设置
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty FormatSettingProperty;
        
        /// <summary>
        /// 条件格式应用到的列集合
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty ApplyToColumnsProperty;
        
        /// <summary>
        /// DefaultType
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyObjectType DefaultType;
        
        private CachedViewPtr<QueryFormatSettingElement> _formatSetting;
        
        private CachedViewPtr<DependencyObjectCollectionView<QueryFormatApplyColumnElement>> _applyToColumns;
        
        /// <summary>
        /// 构造函数
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1810:InitializeReferenceTypeStaticFieldsInline")]
        static QueryConditionFormatElement() {
            // DefaultType
            DefaultType = new DependencyObjectType("QueryConditionFormatElement", new Attribute[] {
                        new DataEntityAttribute("ConditionFormatId")});
            // ConditionFormatId
            SimplePropertyAttribute simplePropertyAttribute0 = new SimplePropertyAttribute(GeneralDBType.String);
            simplePropertyAttribute0.Description = "条件格式Id，主键，同一集合内不能重复，不可为空";
            ConditionFormatIdProperty = DefaultType.RegisterSimpleProperty("ConditionFormatId", typeof(string), null, false, new Attribute[] {
                        simplePropertyAttribute0});
            // Name
            SimplePropertyAttribute simplePropertyAttribute1 = new SimplePropertyAttribute(GeneralDBType.String);
            simplePropertyAttribute1.Description = "条件格式名称，不可为空";
            NameProperty = DefaultType.RegisterSimpleProperty("Name", typeof(string), null, false, new Attribute[] {
                        simplePropertyAttribute1});
            // ConditionExpression
            SimplePropertyAttribute simplePropertyAttribute2 = new SimplePropertyAttribute(GeneralDBType.String);
            simplePropertyAttribute2.Description = "条件表达式，当该表达式成立时应用样式";
            ConditionExpressionProperty = DefaultType.RegisterSimpleProperty("ConditionExpression", typeof(string), null, false, new Attribute[] {
                        simplePropertyAttribute2});
            // IsApplyToRow
            SimplePropertyAttribute simplePropertyAttribute3 = new SimplePropertyAttribute(GeneralDBType.Boolean);
            simplePropertyAttribute3.Description = "该格式是否应用到整行，默认false";
            IsApplyToRowProperty = DefaultType.RegisterSimpleProperty("IsApplyToRow", typeof(bool), false, false, new Attribute[] {
                        simplePropertyAttribute3});
            // FormatSetting
            ComplexPropertyAttribute complexPropertyAttribute0 = new ComplexPropertyAttribute();
            complexPropertyAttribute0.Description = "样式设置";
            FormatSettingProperty = DefaultType.RegisterComplexProperty("FormatSetting", QueryFormatSettingElement.DefaultType, true, new Attribute[] {
                        complexPropertyAttribute0});
            // ApplyToColumns
            CollectionPropertyAttribute collectionPropertyAttribute0 = new CollectionPropertyAttribute(typeof(DependencyObject));
            collectionPropertyAttribute0.Description = "条件格式应用到的列集合";
            ApplyToColumnsProperty = DefaultType.RegisterCollectionProperty("ApplyToColumns", QueryFormatApplyColumnElement.DefaultType, true, new Attribute[] {
                        collectionPropertyAttribute0});
        }
        
        /// <summary>
        /// 构造函数
        /// </summary>
        public QueryConditionFormatElement() : 
                base() {
            this.InitializeView();
        }
        
        /// <summary>
        /// 构造函数
        /// </summary>
        public QueryConditionFormatElement(DependencyObject obj) : 
                base(obj) {
            this.InitializeView();
        }
        
        /// <summary>
        /// 条件格式Id，主键，同一集合内不能重复，不可为空
        /// </summary>
        public string ConditionFormatId {
            get {
                return ((string)(this.DependencyObject[QueryConditionFormatElement.ConditionFormatIdProperty]));
            }
            set {
                this.DependencyObject[QueryConditionFormatElement.ConditionFormatIdProperty] = value;
            }
        }
        
        /// <summary>
        /// 条件格式名称，不可为空
        /// </summary>
        public string Name {
            get {
                return ((string)(this.DependencyObject[QueryConditionFormatElement.NameProperty]));
            }
            set {
                this.DependencyObject[QueryConditionFormatElement.NameProperty] = value;
            }
        }
        
        /// <summary>
        /// 条件表达式，当该表达式成立时应用样式
        /// </summary>
        public string ConditionExpression {
            get {
                return ((string)(this.DependencyObject[QueryConditionFormatElement.ConditionExpressionProperty]));
            }
            set {
                this.DependencyObject[QueryConditionFormatElement.ConditionExpressionProperty] = value;
            }
        }
        
        /// <summary>
        /// 该格式是否应用到整行，默认false
        /// </summary>
        public bool IsApplyToRow {
            get {
                return ((bool)(this.DependencyObject[QueryConditionFormatElement.IsApplyToRowProperty]));
            }
            set {
                this.DependencyObject[QueryConditionFormatElement.IsApplyToRowProperty] = value;
            }
        }
        
        /// <summary>
        /// 样式设置
        /// </summary>
        public QueryFormatSettingElement FormatSetting {
            get {
                return _formatSetting.Value;
            }
        }
        
        /// <summary>
        /// 条件格式应用到的列集合
        /// </summary>
        public DependencyObjectCollectionView<QueryFormatApplyColumnElement> ApplyToColumns {
            get {
                return _applyToColumns.Value;
            }
        }
        
        private void InitializeView() {
            _formatSetting = this.RegisterComplexViewPtr<QueryFormatSettingElement>(QueryConditionFormatElement.FormatSettingProperty);
            _applyToColumns = this.RegisterCollectionViewPtr<QueryFormatApplyColumnElement>(QueryConditionFormatElement.ApplyToColumnsProperty);
        }
    }
}
namespace System.Configuration.Core.Tests {
    using System;
    using System.Collections.Generic;



    
    
    /// <summary>
    /// 设置的样式
    /// </summary>
    [DataEntityRegisterAttribute()]
    sealed class QueryFormatSettingElement : DependencyObjectView {
        
        /// <summary>
        /// 是否以粗体显示，默认false
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty BoldProperty;
        
        /// <summary>
        /// 是否应用粗体
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty BoldEnabledProperty;
        
        /// <summary>
        /// 是否以斜体显示，默认false
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty ItalicProperty;
        
        /// <summary>
        /// 是否应用斜体
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty ItalicEnabledProperty;
        
        /// <summary>
        /// 是否显示下划线，默认false
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty UnderlineProperty;
        
        /// <summary>
        /// 是否应用下划线
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty UnderlineEnabledProperty;
        
        /// <summary>
        /// 是否显示删除线，默认false
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty StrikeoutProperty;
        
        /// <summary>
        /// 是否应用删除线
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty StrikeoutEnabledProperty;
        
        /// <summary>
        /// 字体名称，如Tahoma
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty FontProperty;
        
        /// <summary>
        /// 是否应用字体
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty FontEnabledProperty;
        
        /// <summary>
        /// 字体大小
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty SizeProperty;
        
        /// <summary>
        /// 是否应用大小
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty SizeEnabledProperty;
        
        /// <summary>
        /// 对齐的方式，类型：System.Windows.Forms.HorizontalAlignment，默认Left
        /// </summary>
        /// <remarks>
        /// 详细信息请参见<see cref="System.Windows.Forms.HorizontalAlignment"/>
        /// </remarks>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty AlignProperty;
        
        /// <summary>
        /// 是否应用对齐的方式
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty AlignEnabledProperty;
        
        /// <summary>
        /// 背景色，如#FF0000
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty BackgroundColorProperty;
        
        /// <summary>
        /// 是否应用背景色
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty BackgroundColorEnabledProperty;
        
        /// <summary>
        /// 前景色，如#FF0000
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty ForeColorProperty;
        
        /// <summary>
        /// 是否应用前景色
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty ForeColorEnabledProperty;
        
        /// <summary>
        /// DefaultType
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyObjectType DefaultType;
        
        /// <summary>
        /// 构造函数
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1810:InitializeReferenceTypeStaticFieldsInline")]
        static QueryFormatSettingElement() {
            // DefaultType
            DefaultType = new DependencyObjectType("QueryFormatSettingElement");
            // Bold
            SimplePropertyAttribute simplePropertyAttribute0 = new SimplePropertyAttribute(GeneralDBType.Boolean);
            simplePropertyAttribute0.Description = "是否以粗体显示，默认false";
            BoldProperty = DefaultType.RegisterSimpleProperty("Bold", typeof(bool), false, false, new Attribute[] {
                        simplePropertyAttribute0});
            // BoldEnabled
            SimplePropertyAttribute simplePropertyAttribute1 = new SimplePropertyAttribute(GeneralDBType.Boolean);
            simplePropertyAttribute1.Description = "是否应用粗体";
            BoldEnabledProperty = DefaultType.RegisterSimpleProperty("BoldEnabled", typeof(bool), false, false, new Attribute[] {
                        simplePropertyAttribute1});
            // Italic
            SimplePropertyAttribute simplePropertyAttribute2 = new SimplePropertyAttribute(GeneralDBType.Boolean);
            simplePropertyAttribute2.Description = "是否以斜体显示，默认false";
            ItalicProperty = DefaultType.RegisterSimpleProperty("Italic", typeof(bool), false, false, new Attribute[] {
                        simplePropertyAttribute2});
            // ItalicEnabled
            SimplePropertyAttribute simplePropertyAttribute3 = new SimplePropertyAttribute(GeneralDBType.Boolean);
            simplePropertyAttribute3.Description = "是否应用斜体";
            ItalicEnabledProperty = DefaultType.RegisterSimpleProperty("ItalicEnabled", typeof(bool), false, false, new Attribute[] {
                        simplePropertyAttribute3});
            // Underline
            SimplePropertyAttribute simplePropertyAttribute4 = new SimplePropertyAttribute(GeneralDBType.Boolean);
            simplePropertyAttribute4.Description = "是否显示下划线，默认false";
            UnderlineProperty = DefaultType.RegisterSimpleProperty("Underline", typeof(bool), false, false, new Attribute[] {
                        simplePropertyAttribute4});
            // UnderlineEnabled
            SimplePropertyAttribute simplePropertyAttribute5 = new SimplePropertyAttribute(GeneralDBType.Boolean);
            simplePropertyAttribute5.Description = "是否应用下划线";
            UnderlineEnabledProperty = DefaultType.RegisterSimpleProperty("UnderlineEnabled", typeof(bool), false, false, new Attribute[] {
                        simplePropertyAttribute5});
            // Strikeout
            SimplePropertyAttribute simplePropertyAttribute6 = new SimplePropertyAttribute(GeneralDBType.Boolean);
            simplePropertyAttribute6.Description = "是否显示删除线，默认false";
            StrikeoutProperty = DefaultType.RegisterSimpleProperty("Strikeout", typeof(bool), false, false, new Attribute[] {
                        simplePropertyAttribute6});
            // StrikeoutEnabled
            SimplePropertyAttribute simplePropertyAttribute7 = new SimplePropertyAttribute(GeneralDBType.Boolean);
            simplePropertyAttribute7.Description = "是否应用删除线";
            StrikeoutEnabledProperty = DefaultType.RegisterSimpleProperty("StrikeoutEnabled", typeof(bool), false, false, new Attribute[] {
                        simplePropertyAttribute7});
            // Font
            SimplePropertyAttribute simplePropertyAttribute8 = new SimplePropertyAttribute(GeneralDBType.String);
            simplePropertyAttribute8.Description = "字体名称，如Tahoma";
            FontProperty = DefaultType.RegisterSimpleProperty("Font", typeof(string), null, false, new Attribute[] {
                        simplePropertyAttribute8});
            // FontEnabled
            SimplePropertyAttribute simplePropertyAttribute9 = new SimplePropertyAttribute(GeneralDBType.Boolean);
            simplePropertyAttribute9.Description = "是否应用字体";
            FontEnabledProperty = DefaultType.RegisterSimpleProperty("FontEnabled", typeof(bool), false, false, new Attribute[] {
                        simplePropertyAttribute9});
            // Size
            SimplePropertyAttribute simplePropertyAttribute10 = new SimplePropertyAttribute(GeneralDBType.Int32);
            simplePropertyAttribute10.Description = "字体大小";
            SizeProperty = DefaultType.RegisterSimpleProperty("Size", typeof(int), null, false, new Attribute[] {
                        simplePropertyAttribute10});
            // SizeEnabled
            SimplePropertyAttribute simplePropertyAttribute11 = new SimplePropertyAttribute(GeneralDBType.Boolean);
            simplePropertyAttribute11.Description = "是否应用大小";
            SizeEnabledProperty = DefaultType.RegisterSimpleProperty("SizeEnabled", typeof(bool), false, false, new Attribute[] {
                        simplePropertyAttribute11});
            // Align
            SimplePropertyAttribute simplePropertyAttribute12 = new SimplePropertyAttribute(GeneralDBType.String);
            simplePropertyAttribute12.Description = "对齐的方式，类型：System.Windows.Forms.HorizontalAlignment，默认Left";
            AlignProperty = DefaultType.RegisterSimpleProperty("Align", typeof(string), "Left", false, new Attribute[] {
                        simplePropertyAttribute12});
            // AlignEnabled
            SimplePropertyAttribute simplePropertyAttribute13 = new SimplePropertyAttribute(GeneralDBType.Boolean);
            simplePropertyAttribute13.Description = "是否应用对齐的方式";
            AlignEnabledProperty = DefaultType.RegisterSimpleProperty("AlignEnabled", typeof(bool), false, false, new Attribute[] {
                        simplePropertyAttribute13});
            // BackgroundColor
            SimplePropertyAttribute simplePropertyAttribute14 = new SimplePropertyAttribute(GeneralDBType.String);
            simplePropertyAttribute14.Description = "背景色，如#FF0000";
            BackgroundColorProperty = DefaultType.RegisterSimpleProperty("BackgroundColor", typeof(string), null, false, new Attribute[] {
                        simplePropertyAttribute14});
            // BackgroundColorEnabled
            SimplePropertyAttribute simplePropertyAttribute15 = new SimplePropertyAttribute(GeneralDBType.Boolean);
            simplePropertyAttribute15.Description = "是否应用背景色";
            BackgroundColorEnabledProperty = DefaultType.RegisterSimpleProperty("BackgroundColorEnabled", typeof(bool), false, false, new Attribute[] {
                        simplePropertyAttribute15});
            // ForeColor
            SimplePropertyAttribute simplePropertyAttribute16 = new SimplePropertyAttribute(GeneralDBType.String);
            simplePropertyAttribute16.Description = "前景色，如#FF0000";
            ForeColorProperty = DefaultType.RegisterSimpleProperty("ForeColor", typeof(string), null, false, new Attribute[] {
                        simplePropertyAttribute16});
            // ForeColorEnabled
            SimplePropertyAttribute simplePropertyAttribute17 = new SimplePropertyAttribute(GeneralDBType.Boolean);
            simplePropertyAttribute17.Description = "是否应用前景色";
            ForeColorEnabledProperty = DefaultType.RegisterSimpleProperty("ForeColorEnabled", typeof(bool), false, false, new Attribute[] {
                        simplePropertyAttribute17});
        }
        
        /// <summary>
        /// 构造函数
        /// </summary>
        public QueryFormatSettingElement() : 
                base() {
        }
        
        /// <summary>
        /// 构造函数
        /// </summary>
        public QueryFormatSettingElement(DependencyObject obj) : 
                base(obj) {
        }
        
        /// <summary>
        /// 是否以粗体显示，默认false
        /// </summary>
        public bool Bold {
            get {
                return ((bool)(this.DependencyObject[QueryFormatSettingElement.BoldProperty]));
            }
            set {
                this.DependencyObject[QueryFormatSettingElement.BoldProperty] = value;
            }
        }
        
        /// <summary>
        /// 是否应用粗体
        /// </summary>
        public bool BoldEnabled {
            get {
                return ((bool)(this.DependencyObject[QueryFormatSettingElement.BoldEnabledProperty]));
            }
            set {
                this.DependencyObject[QueryFormatSettingElement.BoldEnabledProperty] = value;
            }
        }
        
        /// <summary>
        /// 是否以斜体显示，默认false
        /// </summary>
        public bool Italic {
            get {
                return ((bool)(this.DependencyObject[QueryFormatSettingElement.ItalicProperty]));
            }
            set {
                this.DependencyObject[QueryFormatSettingElement.ItalicProperty] = value;
            }
        }
        
        /// <summary>
        /// 是否应用斜体
        /// </summary>
        public bool ItalicEnabled {
            get {
                return ((bool)(this.DependencyObject[QueryFormatSettingElement.ItalicEnabledProperty]));
            }
            set {
                this.DependencyObject[QueryFormatSettingElement.ItalicEnabledProperty] = value;
            }
        }
        
        /// <summary>
        /// 是否显示下划线，默认false
        /// </summary>
        public bool Underline {
            get {
                return ((bool)(this.DependencyObject[QueryFormatSettingElement.UnderlineProperty]));
            }
            set {
                this.DependencyObject[QueryFormatSettingElement.UnderlineProperty] = value;
            }
        }
        
        /// <summary>
        /// 是否应用下划线
        /// </summary>
        public bool UnderlineEnabled {
            get {
                return ((bool)(this.DependencyObject[QueryFormatSettingElement.UnderlineEnabledProperty]));
            }
            set {
                this.DependencyObject[QueryFormatSettingElement.UnderlineEnabledProperty] = value;
            }
        }
        
        /// <summary>
        /// 是否显示删除线，默认false
        /// </summary>
        public bool Strikeout {
            get {
                return ((bool)(this.DependencyObject[QueryFormatSettingElement.StrikeoutProperty]));
            }
            set {
                this.DependencyObject[QueryFormatSettingElement.StrikeoutProperty] = value;
            }
        }
        
        /// <summary>
        /// 是否应用删除线
        /// </summary>
        public bool StrikeoutEnabled {
            get {
                return ((bool)(this.DependencyObject[QueryFormatSettingElement.StrikeoutEnabledProperty]));
            }
            set {
                this.DependencyObject[QueryFormatSettingElement.StrikeoutEnabledProperty] = value;
            }
        }
        
        /// <summary>
        /// 字体名称，如Tahoma
        /// </summary>
        public string Font {
            get {
                return ((string)(this.DependencyObject[QueryFormatSettingElement.FontProperty]));
            }
            set {
                this.DependencyObject[QueryFormatSettingElement.FontProperty] = value;
            }
        }
        
        /// <summary>
        /// 是否应用字体
        /// </summary>
        public bool FontEnabled {
            get {
                return ((bool)(this.DependencyObject[QueryFormatSettingElement.FontEnabledProperty]));
            }
            set {
                this.DependencyObject[QueryFormatSettingElement.FontEnabledProperty] = value;
            }
        }
        
        /// <summary>
        /// 字体大小
        /// </summary>
        public int Size {
            get {
                return ((int)(this.DependencyObject[QueryFormatSettingElement.SizeProperty]));
            }
            set {
                this.DependencyObject[QueryFormatSettingElement.SizeProperty] = value;
            }
        }
        
        /// <summary>
        /// 是否应用大小
        /// </summary>
        public bool SizeEnabled {
            get {
                return ((bool)(this.DependencyObject[QueryFormatSettingElement.SizeEnabledProperty]));
            }
            set {
                this.DependencyObject[QueryFormatSettingElement.SizeEnabledProperty] = value;
            }
        }
        
        /// <summary>
        /// 对齐的方式，类型：System.Windows.Forms.HorizontalAlignment，默认Left
        /// </summary>
        /// <remarks>
        /// 详细信息请参见<see cref="System.Windows.Forms.HorizontalAlignment"/>
        /// </remarks>
        public string Align {
            get {
                return ((string)(this.DependencyObject[QueryFormatSettingElement.AlignProperty]));
            }
            set {
                this.DependencyObject[QueryFormatSettingElement.AlignProperty] = value;
            }
        }
        
        /// <summary>
        /// 是否应用对齐的方式
        /// </summary>
        public bool AlignEnabled {
            get {
                return ((bool)(this.DependencyObject[QueryFormatSettingElement.AlignEnabledProperty]));
            }
            set {
                this.DependencyObject[QueryFormatSettingElement.AlignEnabledProperty] = value;
            }
        }
        
        /// <summary>
        /// 背景色，如#FF0000
        /// </summary>
        public string BackgroundColor {
            get {
                return ((string)(this.DependencyObject[QueryFormatSettingElement.BackgroundColorProperty]));
            }
            set {
                this.DependencyObject[QueryFormatSettingElement.BackgroundColorProperty] = value;
            }
        }
        
        /// <summary>
        /// 是否应用背景色
        /// </summary>
        public bool BackgroundColorEnabled {
            get {
                return ((bool)(this.DependencyObject[QueryFormatSettingElement.BackgroundColorEnabledProperty]));
            }
            set {
                this.DependencyObject[QueryFormatSettingElement.BackgroundColorEnabledProperty] = value;
            }
        }
        
        /// <summary>
        /// 前景色，如#FF0000
        /// </summary>
        public string ForeColor {
            get {
                return ((string)(this.DependencyObject[QueryFormatSettingElement.ForeColorProperty]));
            }
            set {
                this.DependencyObject[QueryFormatSettingElement.ForeColorProperty] = value;
            }
        }
        
        /// <summary>
        /// 是否应用前景色
        /// </summary>
        public bool ForeColorEnabled {
            get {
                return ((bool)(this.DependencyObject[QueryFormatSettingElement.ForeColorEnabledProperty]));
            }
            set {
                this.DependencyObject[QueryFormatSettingElement.ForeColorEnabledProperty] = value;
            }
        }
    }
}
namespace System.Configuration.Core.Tests {
    using System;
    using System.Collections.Generic;



    
    
    /// <summary>
    /// 条件格式应用到的列
    /// </summary>
    [DataEntityRegisterAttribute()]
    sealed class QueryFormatApplyColumnElement : DependencyObjectView {
        
        /// <summary>
        /// 条件格式应用到的列的别名
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty ColumnAliasProperty;
        
        /// <summary>
        /// DefaultType
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyObjectType DefaultType;
        
        /// <summary>
        /// 构造函数
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1810:InitializeReferenceTypeStaticFieldsInline")]
        static QueryFormatApplyColumnElement() {
            // DefaultType
            DefaultType = new DependencyObjectType("QueryFormatApplyColumnElement", new Attribute[] {
                        new DataEntityAttribute("ColumnAlias")});
            // ColumnAlias
            SimplePropertyAttribute simplePropertyAttribute0 = new SimplePropertyAttribute(GeneralDBType.String);
            simplePropertyAttribute0.Description = "条件格式应用到的列的别名";
            ColumnAliasProperty = DefaultType.RegisterSimpleProperty("ColumnAlias", typeof(string), null, false, new Attribute[] {
                        simplePropertyAttribute0});
        }
        
        /// <summary>
        /// 构造函数
        /// </summary>
        public QueryFormatApplyColumnElement() : 
                base() {
        }
        
        /// <summary>
        /// 构造函数
        /// </summary>
        public QueryFormatApplyColumnElement(DependencyObject obj) : 
                base(obj) {
        }
        
        /// <summary>
        /// 条件格式应用到的列的别名
        /// </summary>
        public string ColumnAlias {
            get {
                return ((string)(this.DependencyObject[QueryFormatApplyColumnElement.ColumnAliasProperty]));
            }
            set {
                this.DependencyObject[QueryFormatApplyColumnElement.ColumnAliasProperty] = value;
            }
        }
    }
}
namespace System.Configuration.Core.Tests {
    using System;
    using System.Collections.Generic;



    
    
    /// <summary>
    /// 查询表达式和查询Group的基类
    /// </summary>
    [DataEntityRegisterAttribute()]
    sealed class ConditionItemBaseElement : DependencyObjectView {
        
        /// <summary>
        /// ID，标识，不可空白，同一集合内不可重复
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty IdProperty;
        
        /// <summary>
        /// DefaultType
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyObjectType DefaultType;
        
        /// <summary>
        /// 构造函数
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1810:InitializeReferenceTypeStaticFieldsInline")]
        static ConditionItemBaseElement() {
            // DefaultType
            DefaultType = new DependencyObjectType("ConditionItemBaseElement", new Attribute[] {
                        new DataEntityAttribute("Id")});
            // Id
            SimplePropertyAttribute simplePropertyAttribute0 = new SimplePropertyAttribute(GeneralDBType.String);
            simplePropertyAttribute0.Description = "ID，标识，不可空白，同一集合内不可重复";
            IdProperty = DefaultType.RegisterSimpleProperty("Id", typeof(string), null, false, new Attribute[] {
                        simplePropertyAttribute0});
        }
        
        /// <summary>
        /// 构造函数
        /// </summary>
        public ConditionItemBaseElement() : 
                base() {
        }
        
        /// <summary>
        /// 构造函数
        /// </summary>
        public ConditionItemBaseElement(DependencyObject obj) : 
                base(obj) {
        }
        
        /// <summary>
        /// ID，标识，不可空白，同一集合内不可重复
        /// </summary>
        public string Id {
            get {
                return ((string)(this.DependencyObject[ConditionItemBaseElement.IdProperty]));
            }
            set {
                this.DependencyObject[ConditionItemBaseElement.IdProperty] = value;
            }
        }
    }
}
namespace System.Configuration.Core.Tests {
    using System;
    using System.Collections.Generic;



    
    
    /// <summary>
    /// 查询表达式项的基类，表示表达式的左侧或右侧
    /// </summary>
    [DataEntityRegisterAttribute()]
    sealed class ValueBaseElement : DependencyObjectView {
        
        /// <summary>
        /// ID，标识，不可空白，同一集合内不可重复
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty IdProperty;
        
        /// <summary>
        /// DefaultType
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyObjectType DefaultType;
        
        /// <summary>
        /// 构造函数
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1810:InitializeReferenceTypeStaticFieldsInline")]
        static ValueBaseElement() {
            // DefaultType
            DefaultType = new DependencyObjectType("ValueBaseElement", new Attribute[0]);
            // Id
            SimplePropertyAttribute simplePropertyAttribute0 = new SimplePropertyAttribute(GeneralDBType.String);
            simplePropertyAttribute0.Description = "ID，标识，不可空白，同一集合内不可重复";
            IdProperty = DefaultType.RegisterSimpleProperty("Id", typeof(string), null, false, new Attribute[] {
                        simplePropertyAttribute0});
        }
        
        /// <summary>
        /// 构造函数
        /// </summary>
        public ValueBaseElement() : 
                base() {
        }
        
        /// <summary>
        /// 构造函数
        /// </summary>
        public ValueBaseElement(DependencyObject obj) : 
                base(obj) {
        }
        
        /// <summary>
        /// ID，标识，不可空白，同一集合内不可重复
        /// </summary>
        public string Id {
            get {
                return ((string)(this.DependencyObject[ValueBaseElement.IdProperty]));
            }
            set {
                this.DependencyObject[ValueBaseElement.IdProperty] = value;
            }
        }
    }
}
namespace System.Configuration.Core.Tests {
    using System;
    using System.Collections.Generic;



    
    
    /// <summary>
    /// 查询条件表达式，映射到Digiwin.Common.Services.ConditionItem
    /// </summary>
    [DataEntityRegisterAttribute()]
    sealed class ConditionItemElement : DependencyObjectView {
        
        /// <summary>
        /// 条件比较符，类型：CompareOperator，不可空白
        /// </summary>
        /// <remarks>
        /// 详细信息请参见<see cref="CompareOperator"/>
        /// </remarks>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty CompareOperatorProperty;
        
        /// <summary>
        /// 表达式的左侧
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty LeftProperty;
        
        /// <summary>
        /// 表达式的右侧部分，可为多项
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty ValuesProperty;
        
        /// <summary>
        /// DefaultType
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyObjectType DefaultType;
        
        private CachedViewPtr<ValueBaseElement> _left;
        
        private CachedViewPtr<DependencyObjectCollectionView<ValueBaseElement>> _values;
        
        /// <summary>
        /// 构造函数
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1810:InitializeReferenceTypeStaticFieldsInline")]
        static ConditionItemElement() {
            // DefaultType
            DefaultType = new DependencyObjectType("ConditionItemElement");
            DefaultType.RegisterBaseType(ConditionItemBaseElement.DefaultType);
            // CompareOperator
            SimplePropertyAttribute simplePropertyAttribute0 = new SimplePropertyAttribute(GeneralDBType.String);
            simplePropertyAttribute0.Description = "条件比较符，类型：CompareOperator，不可空白";
            CompareOperatorProperty = DefaultType.RegisterSimpleProperty("CompareOperator", typeof(string), null, false, new Attribute[] {
                        simplePropertyAttribute0});
            // Left
            ComplexPropertyAttribute complexPropertyAttribute0 = new ComplexPropertyAttribute();
            complexPropertyAttribute0.Description = "表达式的左侧";
            LeftProperty = DefaultType.RegisterComplexProperty("Left", ValueBaseElement.DefaultType, false, new Attribute[] {
                        complexPropertyAttribute0});
            // Values
            CollectionPropertyAttribute collectionPropertyAttribute0 = new CollectionPropertyAttribute(typeof(DependencyObject));
            collectionPropertyAttribute0.Description = "表达式的右侧部分，可为多项";
            ValuesProperty = DefaultType.RegisterCollectionProperty("Values", ValueBaseElement.DefaultType, true, new Attribute[] {
                        collectionPropertyAttribute0});
        }
        
        /// <summary>
        /// 构造函数
        /// </summary>
        public ConditionItemElement() : 
                base() {
            this.InitializeView();
        }
        
        /// <summary>
        /// 构造函数
        /// </summary>
        public ConditionItemElement(DependencyObject obj) : 
                base(obj) {
            this.InitializeView();
        }
        
        /// <summary>
        /// 条件比较符，类型：CompareOperator，不可空白
        /// </summary>
        /// <remarks>
        /// 详细信息请参见<see cref="CompareOperator"/>
        /// </remarks>
        public string CompareOperator {
            get {
                return ((string)(this.DependencyObject[ConditionItemElement.CompareOperatorProperty]));
            }
            set {
                this.DependencyObject[ConditionItemElement.CompareOperatorProperty] = value;
            }
        }
        
        /// <summary>
        /// ID，标识，不可空白，同一集合内不可重复
        /// </summary>
        public string Id {
            get {
                return ((string)(this.DependencyObject[ConditionItemBaseElement.IdProperty]));
            }
            set {
                this.DependencyObject[ConditionItemBaseElement.IdProperty] = value;
            }
        }
        
        /// <summary>
        /// 表达式的左侧
        /// </summary>
        public ValueBaseElement Left {
            get {
                return _left.Value;
            }
        }
        
        /// <summary>
        /// 表达式的右侧部分，可为多项
        /// </summary>
        public DependencyObjectCollectionView<ValueBaseElement> Values {
            get {
                return _values.Value;
            }
        }
        
        private void InitializeView() {
            _left = this.RegisterComplexViewPtr<ValueBaseElement>(ConditionItemElement.LeftProperty);
            _values = this.RegisterCollectionViewPtr<ValueBaseElement>(ConditionItemElement.ValuesProperty);
        }
    }
}
namespace System.Configuration.Core.Tests {
    using System;
    using System.Collections.Generic;



    
    
    /// <summary>
    /// 常量项，代表一个常量，映射到Digiwin.Common.Services.ConstantValue
    /// </summary>
    [DataEntityRegisterAttribute()]
    sealed class ConstantValueElement : DependencyObjectView {
        
        /// <summary>
        /// 常量对应的GeneralDBType类型
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty DataTypeProperty;
        
        /// <summary>
        /// 常量对应的值
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty ValueProperty;
        
        /// <summary>
        /// DefaultType
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyObjectType DefaultType;
        
        /// <summary>
        /// 构造函数
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1810:InitializeReferenceTypeStaticFieldsInline")]
        static ConstantValueElement() {
            // DefaultType
            DefaultType = new DependencyObjectType("ConstantValueElement", new Attribute[] {
                        new DataEntityAttribute("Id")});
            DefaultType.RegisterBaseType(ValueBaseElement.DefaultType);
            // DataType
            SimplePropertyAttribute simplePropertyAttribute0 = new SimplePropertyAttribute(GeneralDBType.String);
            simplePropertyAttribute0.Description = "常量对应的GeneralDBType类型";
            DataTypeProperty = DefaultType.RegisterSimpleProperty("DataType", typeof(string), "String", false, new Attribute[] {
                        simplePropertyAttribute0});
            // Value
            SimplePropertyAttribute simplePropertyAttribute1 = new SimplePropertyAttribute(GeneralDBType.String);
            simplePropertyAttribute1.Description = "常量对应的值";
            ValueProperty = DefaultType.RegisterSimpleProperty("Value", typeof(string), null, false, new Attribute[] {
                        simplePropertyAttribute1});
        }
        
        /// <summary>
        /// 构造函数
        /// </summary>
        public ConstantValueElement() : 
                base() {
        }
        
        /// <summary>
        /// 构造函数
        /// </summary>
        public ConstantValueElement(DependencyObject obj) : 
                base(obj) {
        }
        
        /// <summary>
        /// 常量对应的GeneralDBType类型
        /// </summary>
        public string DataType {
            get {
                return ((string)(this.DependencyObject[ConstantValueElement.DataTypeProperty]));
            }
            set {
                this.DependencyObject[ConstantValueElement.DataTypeProperty] = value;
            }
        }
        
        /// <summary>
        /// 常量对应的值
        /// </summary>
        public string Value {
            get {
                return ((string)(this.DependencyObject[ConstantValueElement.ValueProperty]));
            }
            set {
                this.DependencyObject[ConstantValueElement.ValueProperty] = value;
            }
        }
        
        /// <summary>
        /// ID，标识，不可空白，同一集合内不可重复
        /// </summary>
        public string Id {
            get {
                return ((string)(this.DependencyObject[ValueBaseElement.IdProperty]));
            }
            set {
                this.DependencyObject[ValueBaseElement.IdProperty] = value;
            }
        }
    }
}
namespace System.Configuration.Core.Tests {
    using System;
    using System.Collections.Generic;



    
    
    /// <summary>
    /// Lambda项，代表表达式运算项，其运算结果将用于查询，映射到Digiwin.Common.Services.LambdaValue
    /// </summary>
    [DataEntityRegisterAttribute()]
    sealed class LambdaValueElement : DependencyObjectView {
        
        /// <summary>
        /// 常量对应的GeneralDBType类型
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty DataTypeProperty;
        
        /// <summary>
        /// 用于运算Value的脚本表达式
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty ExpressionProperty;
        
        /// <summary>
        /// DefaultType
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyObjectType DefaultType;
        
        /// <summary>
        /// 构造函数
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1810:InitializeReferenceTypeStaticFieldsInline")]
        static LambdaValueElement() {
            // DefaultType
            DefaultType = new DependencyObjectType("LambdaValueElement", new Attribute[] {
                        new DataEntityAttribute("Id")});
            DefaultType.RegisterBaseType(ValueBaseElement.DefaultType);
            // DataType
            SimplePropertyAttribute simplePropertyAttribute0 = new SimplePropertyAttribute(GeneralDBType.String);
            simplePropertyAttribute0.Description = "常量对应的GeneralDBType类型";
            DataTypeProperty = DefaultType.RegisterSimpleProperty("DataType", typeof(string), "String", false, new Attribute[] {
                        simplePropertyAttribute0});
            // Expression
            SimplePropertyAttribute simplePropertyAttribute1 = new SimplePropertyAttribute(GeneralDBType.String);
            simplePropertyAttribute1.Description = "用于运算Value的脚本表达式";
            ExpressionProperty = DefaultType.RegisterSimpleProperty("Expression", typeof(string), null, false, new Attribute[] {
                        simplePropertyAttribute1});
        }
        
        /// <summary>
        /// 构造函数
        /// </summary>
        public LambdaValueElement() : 
                base() {
        }
        
        /// <summary>
        /// 构造函数
        /// </summary>
        public LambdaValueElement(DependencyObject obj) : 
                base(obj) {
        }
        
        /// <summary>
        /// 常量对应的GeneralDBType类型
        /// </summary>
        public string DataType {
            get {
                return ((string)(this.DependencyObject[LambdaValueElement.DataTypeProperty]));
            }
            set {
                this.DependencyObject[LambdaValueElement.DataTypeProperty] = value;
            }
        }
        
        /// <summary>
        /// 用于运算Value的脚本表达式
        /// </summary>
        public string Expression {
            get {
                return ((string)(this.DependencyObject[LambdaValueElement.ExpressionProperty]));
            }
            set {
                this.DependencyObject[LambdaValueElement.ExpressionProperty] = value;
            }
        }
        
        /// <summary>
        /// ID，标识，不可空白，同一集合内不可重复
        /// </summary>
        public string Id {
            get {
                return ((string)(this.DependencyObject[ValueBaseElement.IdProperty]));
            }
            set {
                this.DependencyObject[ValueBaseElement.IdProperty] = value;
            }
        }
    }
}
namespace System.Configuration.Core.Tests {
    using System;
    using System.Collections.Generic;



    
    
    /// <summary>
    /// 属性项，代表一个属性，映射到Digiwin.Common.Services.PropertyValue
    /// </summary>
    [DataEntityRegisterAttribute()]
    sealed class PropertyValueElement : DependencyObjectView {
        
        /// <summary>
        /// 查询视图内所含数据列的属性全路径，支持Parent关键字访问上层实体，如CustomerId.Name，ContactInfo.ContactId.Name，不可为空
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty PathProperty;
        
        /// <summary>
        /// DefaultType
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyObjectType DefaultType;
        
        /// <summary>
        /// 构造函数
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1810:InitializeReferenceTypeStaticFieldsInline")]
        static PropertyValueElement() {
            // DefaultType
            DefaultType = new DependencyObjectType("PropertyValueElement", new Attribute[] {
                        new DataEntityAttribute("Id")});
            DefaultType.RegisterBaseType(ValueBaseElement.DefaultType);
            // Path
            SimplePropertyAttribute simplePropertyAttribute0 = new SimplePropertyAttribute(GeneralDBType.String);
            simplePropertyAttribute0.Description = "查询视图内所含数据列的属性全路径，支持Parent关键字访问上层实体，如CustomerId.Name，ContactInfo.ContactId.Name，不可" +
                "为空";
            PathProperty = DefaultType.RegisterSimpleProperty("Path", typeof(string), null, false, new Attribute[] {
                        simplePropertyAttribute0});
        }
        
        /// <summary>
        /// 构造函数
        /// </summary>
        public PropertyValueElement() : 
                base() {
        }
        
        /// <summary>
        /// 构造函数
        /// </summary>
        public PropertyValueElement(DependencyObject obj) : 
                base(obj) {
        }
        
        /// <summary>
        /// 查询视图内所含数据列的属性全路径，支持Parent关键字访问上层实体，如CustomerId.Name，ContactInfo.ContactId.Name，不可为空
        /// </summary>
        public string Path {
            get {
                return ((string)(this.DependencyObject[PropertyValueElement.PathProperty]));
            }
            set {
                this.DependencyObject[PropertyValueElement.PathProperty] = value;
            }
        }
        
        /// <summary>
        /// ID，标识，不可空白，同一集合内不可重复
        /// </summary>
        public string Id {
            get {
                return ((string)(this.DependencyObject[ValueBaseElement.IdProperty]));
            }
            set {
                this.DependencyObject[ValueBaseElement.IdProperty] = value;
            }
        }
    }
}
namespace System.Configuration.Core.Tests {
    using System;
    using System.Collections.Generic;



    
    
    /// <summary>
    /// 参数项，代表一个参数类型，映射到Digiwin.Common.Services.ParameterValue
    /// </summary>
    [DataEntityRegisterAttribute()]
    sealed class ParameterValueElement : DependencyObjectView {
        
        /// <summary>
        /// 参数的名称，不可空白
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty ParameterNameProperty;
        
        /// <summary>
        /// DefaultType
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyObjectType DefaultType;
        
        /// <summary>
        /// 构造函数
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1810:InitializeReferenceTypeStaticFieldsInline")]
        static ParameterValueElement() {
            // DefaultType
            DefaultType = new DependencyObjectType("ParameterValueElement", new Attribute[] {
                        new DataEntityAttribute("Id")});
            DefaultType.RegisterBaseType(ValueBaseElement.DefaultType);
            // ParameterName
            SimplePropertyAttribute simplePropertyAttribute0 = new SimplePropertyAttribute(GeneralDBType.String);
            simplePropertyAttribute0.Description = "参数的名称，不可空白";
            ParameterNameProperty = DefaultType.RegisterSimpleProperty("ParameterName", typeof(string), null, false, new Attribute[] {
                        simplePropertyAttribute0});
        }
        
        /// <summary>
        /// 构造函数
        /// </summary>
        public ParameterValueElement() : 
                base() {
        }
        
        /// <summary>
        /// 构造函数
        /// </summary>
        public ParameterValueElement(DependencyObject obj) : 
                base(obj) {
        }
        
        /// <summary>
        /// 参数的名称，不可空白
        /// </summary>
        public string ParameterName {
            get {
                return ((string)(this.DependencyObject[ParameterValueElement.ParameterNameProperty]));
            }
            set {
                this.DependencyObject[ParameterValueElement.ParameterNameProperty] = value;
            }
        }
        
        /// <summary>
        /// ID，标识，不可空白，同一集合内不可重复
        /// </summary>
        public string Id {
            get {
                return ((string)(this.DependencyObject[ValueBaseElement.IdProperty]));
            }
            set {
                this.DependencyObject[ValueBaseElement.IdProperty] = value;
            }
        }
    }
}
namespace System.Configuration.Core.Tests {
    using System;
    using System.Collections.Generic;



    
    
    /// <summary>
    /// 函数项，映射到Digiwin.Common.Services.FunctionValue
    /// </summary>
    [DataEntityRegisterAttribute()]
    sealed class FunctionValueElement : DependencyObjectView {
        
        /// <summary>
        /// 函数类型的枚举,如:IsNull,SubString等
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty FunctionTypeProperty;
        
        /// <summary>
        /// 函数对应的参数集合
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty ParametersProperty;
        
        /// <summary>
        /// DefaultType
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyObjectType DefaultType;
        
        private CachedViewPtr<DependencyObjectCollectionView<ValueBaseElement>> _parameters;
        
        /// <summary>
        /// 构造函数
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1810:InitializeReferenceTypeStaticFieldsInline")]
        static FunctionValueElement() {
            // DefaultType
            DefaultType = new DependencyObjectType("FunctionValueElement", new Attribute[] {
                        new DataEntityAttribute("Id")});
            DefaultType.RegisterBaseType(ValueBaseElement.DefaultType);
            // FunctionType
            SimplePropertyAttribute simplePropertyAttribute0 = new SimplePropertyAttribute(GeneralDBType.String);
            simplePropertyAttribute0.Description = "函数类型的枚举,如:IsNull,SubString等";
            FunctionTypeProperty = DefaultType.RegisterSimpleProperty("FunctionType", typeof(string), null, false, new Attribute[] {
                        simplePropertyAttribute0});
            // Parameters
            CollectionPropertyAttribute collectionPropertyAttribute0 = new CollectionPropertyAttribute(typeof(DependencyObject));
            collectionPropertyAttribute0.Description = "函数对应的参数集合";
            ParametersProperty = DefaultType.RegisterCollectionProperty("Parameters", ValueBaseElement.DefaultType, true, new Attribute[] {
                        collectionPropertyAttribute0});
        }
        
        /// <summary>
        /// 构造函数
        /// </summary>
        public FunctionValueElement() : 
                base() {
            this.InitializeView();
        }
        
        /// <summary>
        /// 构造函数
        /// </summary>
        public FunctionValueElement(DependencyObject obj) : 
                base(obj) {
            this.InitializeView();
        }
        
        /// <summary>
        /// 函数类型的枚举,如:IsNull,SubString等
        /// </summary>
        public string FunctionType {
            get {
                return ((string)(this.DependencyObject[FunctionValueElement.FunctionTypeProperty]));
            }
            set {
                this.DependencyObject[FunctionValueElement.FunctionTypeProperty] = value;
            }
        }
        
        /// <summary>
        /// ID，标识，不可空白，同一集合内不可重复
        /// </summary>
        public string Id {
            get {
                return ((string)(this.DependencyObject[ValueBaseElement.IdProperty]));
            }
            set {
                this.DependencyObject[ValueBaseElement.IdProperty] = value;
            }
        }
        
        /// <summary>
        /// 函数对应的参数集合
        /// </summary>
        public DependencyObjectCollectionView<ValueBaseElement> Parameters {
            get {
                return _parameters.Value;
            }
        }
        
        private void InitializeView() {
            _parameters = this.RegisterCollectionViewPtr<ValueBaseElement>(FunctionValueElement.ParametersProperty);
        }
    }
}
namespace System.Configuration.Core.Tests {
    using System;
    using System.Collections.Generic;



    
    
    /// <summary>
    /// 表达式项，映射到Digiwin.Common.Services.ExpressionValue
    /// </summary>
    [DataEntityRegisterAttribute()]
    sealed class ExpressionValueElement : DependencyObjectView {
        
        /// <summary>
        /// 表达式的操作符
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty OperatorProperty;
        
        /// <summary>
        /// 表达式的左侧
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty LeftProperty;
        
        /// <summary>
        /// 表达式的右侧
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty RightProperty;
        
        /// <summary>
        /// DefaultType
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyObjectType DefaultType;
        
        private CachedViewPtr<ValueBaseElement> _left;
        
        private CachedViewPtr<ValueBaseElement> _right;
        
        /// <summary>
        /// 构造函数
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1810:InitializeReferenceTypeStaticFieldsInline")]
        static ExpressionValueElement() {
            // DefaultType
            DefaultType = new DependencyObjectType("ExpressionValueElement", new Attribute[] {
                        new DataEntityAttribute("Id")});
            DefaultType.RegisterBaseType(ValueBaseElement.DefaultType);
            // Operator
            SimplePropertyAttribute simplePropertyAttribute0 = new SimplePropertyAttribute(GeneralDBType.String);
            simplePropertyAttribute0.Description = "表达式的操作符";
            OperatorProperty = DefaultType.RegisterSimpleProperty("Operator", typeof(string), null, false, new Attribute[] {
                        simplePropertyAttribute0});
            // Left
            ComplexPropertyAttribute complexPropertyAttribute0 = new ComplexPropertyAttribute();
            complexPropertyAttribute0.Description = "表达式的左侧";
            LeftProperty = DefaultType.RegisterComplexProperty("Left", ValueBaseElement.DefaultType, false, new Attribute[] {
                        complexPropertyAttribute0});
            // Right
            ComplexPropertyAttribute complexPropertyAttribute1 = new ComplexPropertyAttribute();
            complexPropertyAttribute1.Description = "表达式的右侧";
            RightProperty = DefaultType.RegisterComplexProperty("Right", ValueBaseElement.DefaultType, false, new Attribute[] {
                        complexPropertyAttribute1});
        }
        
        /// <summary>
        /// 构造函数
        /// </summary>
        public ExpressionValueElement() : 
                base() {
            this.InitializeView();
        }
        
        /// <summary>
        /// 构造函数
        /// </summary>
        public ExpressionValueElement(DependencyObject obj) : 
                base(obj) {
            this.InitializeView();
        }
        
        /// <summary>
        /// 表达式的操作符
        /// </summary>
        public string Operator {
            get {
                return ((string)(this.DependencyObject[ExpressionValueElement.OperatorProperty]));
            }
            set {
                this.DependencyObject[ExpressionValueElement.OperatorProperty] = value;
            }
        }
        
        /// <summary>
        /// ID，标识，不可空白，同一集合内不可重复
        /// </summary>
        public string Id {
            get {
                return ((string)(this.DependencyObject[ValueBaseElement.IdProperty]));
            }
            set {
                this.DependencyObject[ValueBaseElement.IdProperty] = value;
            }
        }
        
        /// <summary>
        /// 表达式的左侧
        /// </summary>
        public ValueBaseElement Left {
            get {
                return _left.Value;
            }
        }
        
        /// <summary>
        /// 表达式的右侧
        /// </summary>
        public ValueBaseElement Right {
            get {
                return _right.Value;
            }
        }
        
        private void InitializeView() {
            _left = this.RegisterComplexViewPtr<ValueBaseElement>(ExpressionValueElement.LeftProperty);
            _right = this.RegisterComplexViewPtr<ValueBaseElement>(ExpressionValueElement.RightProperty);
        }
    }
}
namespace System.Configuration.Core.Tests {
    using System;
    using System.Collections.Generic;



    
    
    /// <summary>
    /// Case函数项，计算条件列表并返回多个可能结果表达式之一
    /// </summary>
    [DataEntityRegisterAttribute()]
    sealed class CaseValueElement : DependencyObjectView {
        
        /// <summary>
        /// 使用简单CASE格式时所计算的表达式
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty CaseInputProperty;
        
        /// <summary>
        /// 比较运算计算结果不为TRUE时返回的表达式。如果忽略此参数且比较运算计算结果不为TRUE，则CASE返回NULL
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty CaseElseProperty;
        
        /// <summary>
        /// Case分支的集合
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty CaseBranchesProperty;
        
        /// <summary>
        /// DefaultType
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyObjectType DefaultType;
        
        private CachedViewPtr<ValueBaseElement> _caseInput;
        
        private CachedViewPtr<ValueBaseElement> _caseElse;
        
        private CachedViewPtr<DependencyObjectCollectionView<CaseBranchElement>> _caseBranches;
        
        /// <summary>
        /// 构造函数
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1810:InitializeReferenceTypeStaticFieldsInline")]
        static CaseValueElement() {
            // DefaultType
            DefaultType = new DependencyObjectType("CaseValueElement", new Attribute[] {
                        new DataEntityAttribute("Id")});
            DefaultType.RegisterBaseType(ValueBaseElement.DefaultType);
            // CaseInput
            ComplexPropertyAttribute complexPropertyAttribute0 = new ComplexPropertyAttribute();
            complexPropertyAttribute0.Description = "使用简单CASE格式时所计算的表达式";
            CaseInputProperty = DefaultType.RegisterComplexProperty("CaseInput", ValueBaseElement.DefaultType, false, new Attribute[] {
                        complexPropertyAttribute0});
            // CaseElse
            ComplexPropertyAttribute complexPropertyAttribute1 = new ComplexPropertyAttribute();
            complexPropertyAttribute1.Description = "比较运算计算结果不为TRUE时返回的表达式。如果忽略此参数且比较运算计算结果不为TRUE，则CASE返回NULL";
            CaseElseProperty = DefaultType.RegisterComplexProperty("CaseElse", ValueBaseElement.DefaultType, false, new Attribute[] {
                        complexPropertyAttribute1});
            // CaseBranches
            CollectionPropertyAttribute collectionPropertyAttribute0 = new CollectionPropertyAttribute(typeof(DependencyObject));
            collectionPropertyAttribute0.Description = "Case分支的集合";
            CaseBranchesProperty = DefaultType.RegisterCollectionProperty("CaseBranches", CaseBranchElement.DefaultType, true, new Attribute[] {
                        collectionPropertyAttribute0});
        }
        
        /// <summary>
        /// 构造函数
        /// </summary>
        public CaseValueElement() : 
                base() {
            this.InitializeView();
        }
        
        /// <summary>
        /// 构造函数
        /// </summary>
        public CaseValueElement(DependencyObject obj) : 
                base(obj) {
            this.InitializeView();
        }
        
        /// <summary>
        /// ID，标识，不可空白，同一集合内不可重复
        /// </summary>
        public string Id {
            get {
                return ((string)(this.DependencyObject[ValueBaseElement.IdProperty]));
            }
            set {
                this.DependencyObject[ValueBaseElement.IdProperty] = value;
            }
        }
        
        /// <summary>
        /// 使用简单CASE格式时所计算的表达式
        /// </summary>
        public ValueBaseElement CaseInput {
            get {
                return _caseInput.Value;
            }
        }
        
        /// <summary>
        /// 比较运算计算结果不为TRUE时返回的表达式。如果忽略此参数且比较运算计算结果不为TRUE，则CASE返回NULL
        /// </summary>
        public ValueBaseElement CaseElse {
            get {
                return _caseElse.Value;
            }
        }
        
        /// <summary>
        /// Case分支的集合
        /// </summary>
        public DependencyObjectCollectionView<CaseBranchElement> CaseBranches {
            get {
                return _caseBranches.Value;
            }
        }
        
        private void InitializeView() {
            _caseInput = this.RegisterComplexViewPtr<ValueBaseElement>(CaseValueElement.CaseInputProperty);
            _caseElse = this.RegisterComplexViewPtr<ValueBaseElement>(CaseValueElement.CaseElseProperty);
            _caseBranches = this.RegisterCollectionViewPtr<CaseBranchElement>(CaseValueElement.CaseBranchesProperty);
        }
    }
}
namespace System.Configuration.Core.Tests {
    using System;
    using System.Collections.Generic;



    
    
    /// <summary>
    /// 一个Case分支，映射到Digiwin.Common.Services.CaseItem
    /// </summary>
    [DataEntityRegisterAttribute()]
    sealed class CaseBranchElement : DependencyObjectView {
        
        /// <summary>
        /// ID，标识，不可空白，同一集合内不可重复
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty IdProperty;
        
        /// <summary>
        /// Case分支的顺序号
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty SequenceProperty;
        
        /// <summary>
        /// 要与CaseInput进行比较的简单表达式
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty CaseWhenProperty;
        
        /// <summary>
        /// 当CaseInput=CaseWhen计算结果为TRUE时返回的表达式
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty CaseThenProperty;
        
        /// <summary>
        /// DefaultType
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyObjectType DefaultType;
        
        private CachedViewPtr<ValueBaseElement> _caseWhen;
        
        private CachedViewPtr<ValueBaseElement> _caseThen;
        
        /// <summary>
        /// 构造函数
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1810:InitializeReferenceTypeStaticFieldsInline")]
        static CaseBranchElement() {
            // DefaultType
            DefaultType = new DependencyObjectType("CaseBranchElement", new Attribute[] {
                        new DataEntityAttribute("Id")});
            // Id
            SimplePropertyAttribute simplePropertyAttribute0 = new SimplePropertyAttribute(GeneralDBType.String);
            simplePropertyAttribute0.Description = "ID，标识，不可空白，同一集合内不可重复";
            IdProperty = DefaultType.RegisterSimpleProperty("Id", typeof(string), null, false, new Attribute[] {
                        simplePropertyAttribute0});
            // Sequence
            SimplePropertyAttribute simplePropertyAttribute1 = new SimplePropertyAttribute(GeneralDBType.Int32);
            simplePropertyAttribute1.Description = "Case分支的顺序号";
            SequenceProperty = DefaultType.RegisterSimpleProperty("Sequence", typeof(int), null, false, new Attribute[] {
                        simplePropertyAttribute1});
            // CaseWhen
            ComplexPropertyAttribute complexPropertyAttribute0 = new ComplexPropertyAttribute();
            complexPropertyAttribute0.Description = "要与CaseInput进行比较的简单表达式";
            CaseWhenProperty = DefaultType.RegisterComplexProperty("CaseWhen", ValueBaseElement.DefaultType, false, new Attribute[] {
                        complexPropertyAttribute0});
            // CaseThen
            ComplexPropertyAttribute complexPropertyAttribute1 = new ComplexPropertyAttribute();
            complexPropertyAttribute1.Description = "当CaseInput=CaseWhen计算结果为TRUE时返回的表达式";
            CaseThenProperty = DefaultType.RegisterComplexProperty("CaseThen", ValueBaseElement.DefaultType, false, new Attribute[] {
                        complexPropertyAttribute1});
        }
        
        /// <summary>
        /// 构造函数
        /// </summary>
        public CaseBranchElement() : 
                base() {
            this.InitializeView();
        }
        
        /// <summary>
        /// 构造函数
        /// </summary>
        public CaseBranchElement(DependencyObject obj) : 
                base(obj) {
            this.InitializeView();
        }
        
        /// <summary>
        /// ID，标识，不可空白，同一集合内不可重复
        /// </summary>
        public string Id {
            get {
                return ((string)(this.DependencyObject[CaseBranchElement.IdProperty]));
            }
            set {
                this.DependencyObject[CaseBranchElement.IdProperty] = value;
            }
        }
        
        /// <summary>
        /// Case分支的顺序号
        /// </summary>
        public int Sequence {
            get {
                return ((int)(this.DependencyObject[CaseBranchElement.SequenceProperty]));
            }
            set {
                this.DependencyObject[CaseBranchElement.SequenceProperty] = value;
            }
        }
        
        /// <summary>
        /// 要与CaseInput进行比较的简单表达式
        /// </summary>
        public ValueBaseElement CaseWhen {
            get {
                return _caseWhen.Value;
            }
        }
        
        /// <summary>
        /// 当CaseInput=CaseWhen计算结果为TRUE时返回的表达式
        /// </summary>
        public ValueBaseElement CaseThen {
            get {
                return _caseThen.Value;
            }
        }
        
        private void InitializeView() {
            _caseWhen = this.RegisterComplexViewPtr<ValueBaseElement>(CaseBranchElement.CaseWhenProperty);
            _caseThen = this.RegisterComplexViewPtr<ValueBaseElement>(CaseBranchElement.CaseThenProperty);
        }
    }
}
namespace System.Configuration.Core.Tests {
    using System;
    using System.Collections.Generic;



    
    
    /// <summary>
    /// 限定方案对应的查询条件集合，映射到Digiwin.Common.Services.ConditionItemGroup
    /// </summary>
    [DataEntityRegisterAttribute()]
    sealed class ConditionItemGroupElement : DependencyObjectView {
        
        /// <summary>
        /// 查询条件项的连接逻辑符，可选的值包括：And和Or，默认And
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty LogicalOperatorProperty;
        
        /// <summary>
        /// 包含的查询条件的集合
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty ItemsProperty;
        
        /// <summary>
        /// DefaultType
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyObjectType DefaultType;
        
        private CachedViewPtr<DependencyObjectCollectionView<ConditionItemBaseElement>> _items;
        
        /// <summary>
        /// 构造函数
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1810:InitializeReferenceTypeStaticFieldsInline")]
        static ConditionItemGroupElement() {
            // DefaultType
            DefaultType = new DependencyObjectType("ConditionItemGroupElement");
            DefaultType.RegisterBaseType(ConditionItemBaseElement.DefaultType);
            // LogicalOperator
            SimplePropertyAttribute simplePropertyAttribute0 = new SimplePropertyAttribute(GeneralDBType.String);
            simplePropertyAttribute0.Description = "查询条件项的连接逻辑符，可选的值包括：And和Or，默认And";
            LogicalOperatorProperty = DefaultType.RegisterSimpleProperty("LogicalOperator", typeof(string), "And", false, new Attribute[] {
                        simplePropertyAttribute0});
            // Items
            CollectionPropertyAttribute collectionPropertyAttribute0 = new CollectionPropertyAttribute(typeof(DependencyObject));
            collectionPropertyAttribute0.Description = "包含的查询条件的集合";
            ItemsProperty = DefaultType.RegisterCollectionProperty("Items", ConditionItemBaseElement.DefaultType, true, new Attribute[] {
                        collectionPropertyAttribute0});
        }
        
        /// <summary>
        /// 构造函数
        /// </summary>
        public ConditionItemGroupElement() : 
                base() {
            this.InitializeView();
        }
        
        /// <summary>
        /// 构造函数
        /// </summary>
        public ConditionItemGroupElement(DependencyObject obj) : 
                base(obj) {
            this.InitializeView();
        }
        
        /// <summary>
        /// 查询条件项的连接逻辑符，可选的值包括：And和Or，默认And
        /// </summary>
        public string LogicalOperator {
            get {
                return ((string)(this.DependencyObject[ConditionItemGroupElement.LogicalOperatorProperty]));
            }
            set {
                this.DependencyObject[ConditionItemGroupElement.LogicalOperatorProperty] = value;
            }
        }
        
        /// <summary>
        /// ID，标识，不可空白，同一集合内不可重复
        /// </summary>
        public string Id {
            get {
                return ((string)(this.DependencyObject[ConditionItemBaseElement.IdProperty]));
            }
            set {
                this.DependencyObject[ConditionItemBaseElement.IdProperty] = value;
            }
        }
        
        /// <summary>
        /// 包含的查询条件的集合
        /// </summary>
        public DependencyObjectCollectionView<ConditionItemBaseElement> Items {
            get {
                return _items.Value;
            }
        }
        
        private void InitializeView() {
            _items = this.RegisterCollectionViewPtr<ConditionItemBaseElement>(ConditionItemGroupElement.ItemsProperty);
        }
    }
}
namespace System.Configuration.Core.Tests {
    using System;
    using System.Collections.Generic;



    
    
    /// <summary>
    /// 日期类型的Column编辑器
    /// </summary>
    [DataEntityRegisterAttribute()]
    sealed class DateTimeElement : DependencyObjectView {
        
        /// <summary>
        /// 自定义日期/时间格式字符串，如：MMMM dd, yyyy - dddd，默认yyyy/MM/dd
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty FormatStringProperty;
        
        /// <summary>
        /// 控件中显示的日期和时间格式，类型：System.Windows.Forms.DateTimePickerFormat，默认Long
        /// </summary>
        /// <remarks>
        /// 详细信息请参见<see cref="System.Windows.Forms.DateTimePickerFormat"/>
        /// </remarks>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty DateTimeFormatProperty;
        
        /// <summary>
        /// 周开始的第一天，默认0
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty FirstDayOfWeekProperty;
        
        /// <summary>
        /// 是否显示周数
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty ShowWeekNumbersProperty;
        
        /// <summary>
        /// 周末日期的背景颜色，类型：System.Drawing.Color，默认ControlText
        /// </summary>
        /// <remarks>
        /// 详细信息请参见<see cref="System.Drawing.Color"/>
        /// </remarks>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty WeekendColorProperty;
        
        /// <summary>
        /// 星期的显示格式格式，类型：Digiwin.Common.UI.mcDayFormat，默认Short
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty WeekDaysFormatProperty;
        
        /// <summary>
        /// 快捷键呼叫的公式
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty ShortcutFormulaProperty;
        
        /// <summary>
        /// DefaultType
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyObjectType DefaultType;
        
        private CachedViewPtr<AbstractManualLambdaFormulaElement> _shortcutFormula;
        
        /// <summary>
        /// 构造函数
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1810:InitializeReferenceTypeStaticFieldsInline")]
        static DateTimeElement() {
            // DefaultType
            DefaultType = new DependencyObjectType("DateTimeElement");
            DefaultType.RegisterBaseType(AbstractColumnEditorElement.DefaultType);
            // FormatString
            SimplePropertyAttribute simplePropertyAttribute0 = new SimplePropertyAttribute(GeneralDBType.String);
            simplePropertyAttribute0.Description = "自定义日期/时间格式字符串，如：MMMM dd, yyyy - dddd，默认yyyy/MM/dd";
            FormatStringProperty = DefaultType.RegisterSimpleProperty("FormatString", typeof(string), "yyyy/MM/dd", false, new Attribute[] {
                        simplePropertyAttribute0});
            // DateTimeFormat
            SimplePropertyAttribute simplePropertyAttribute1 = new SimplePropertyAttribute(GeneralDBType.String);
            simplePropertyAttribute1.Description = "控件中显示的日期和时间格式，类型：System.Windows.Forms.DateTimePickerFormat，默认Long";
            DateTimeFormatProperty = DefaultType.RegisterSimpleProperty("DateTimeFormat", typeof(string), "Long", false, new Attribute[] {
                        simplePropertyAttribute1});
            // FirstDayOfWeek
            SimplePropertyAttribute simplePropertyAttribute2 = new SimplePropertyAttribute(GeneralDBType.Int32);
            simplePropertyAttribute2.Description = "周开始的第一天，默认0";
            FirstDayOfWeekProperty = DefaultType.RegisterSimpleProperty("FirstDayOfWeek", typeof(int), 0, false, new Attribute[] {
                        simplePropertyAttribute2});
            // ShowWeekNumbers
            SimplePropertyAttribute simplePropertyAttribute3 = new SimplePropertyAttribute(GeneralDBType.Boolean);
            simplePropertyAttribute3.Description = "是否显示周数";
            ShowWeekNumbersProperty = DefaultType.RegisterSimpleProperty("ShowWeekNumbers", typeof(bool), false, false, new Attribute[] {
                        simplePropertyAttribute3});
            // WeekendColor
            SimplePropertyAttribute simplePropertyAttribute4 = new SimplePropertyAttribute(GeneralDBType.String);
            simplePropertyAttribute4.Description = "周末日期的背景颜色，类型：System.Drawing.Color，默认ControlText";
            WeekendColorProperty = DefaultType.RegisterSimpleProperty("WeekendColor", typeof(string), "White", false, new Attribute[] {
                        simplePropertyAttribute4});
            // WeekDaysFormat
            SimplePropertyAttribute simplePropertyAttribute5 = new SimplePropertyAttribute(GeneralDBType.String);
            simplePropertyAttribute5.Description = "星期的显示格式格式，类型：Digiwin.Common.UI.mcDayFormat，默认Short";
            WeekDaysFormatProperty = DefaultType.RegisterSimpleProperty("WeekDaysFormat", typeof(string), "Short", false, new Attribute[] {
                        simplePropertyAttribute5});
            // ShortcutFormula
            ComplexPropertyAttribute complexPropertyAttribute0 = new ComplexPropertyAttribute();
            complexPropertyAttribute0.Description = "快捷键呼叫的公式";
            ShortcutFormulaProperty = DefaultType.RegisterComplexProperty("ShortcutFormula", AbstractManualLambdaFormulaElement.DefaultType, false, new Attribute[] {
                        complexPropertyAttribute0});
        }
        
        /// <summary>
        /// 构造函数
        /// </summary>
        public DateTimeElement() : 
                base() {
            this.InitializeView();
        }
        
        /// <summary>
        /// 构造函数
        /// </summary>
        public DateTimeElement(DependencyObject obj) : 
                base(obj) {
            this.InitializeView();
        }
        
        /// <summary>
        /// 自定义日期/时间格式字符串，如：MMMM dd, yyyy - dddd，默认yyyy/MM/dd
        /// </summary>
        public string FormatString {
            get {
                return ((string)(this.DependencyObject[DateTimeElement.FormatStringProperty]));
            }
            set {
                this.DependencyObject[DateTimeElement.FormatStringProperty] = value;
            }
        }
        
        /// <summary>
        /// 控件中显示的日期和时间格式，类型：System.Windows.Forms.DateTimePickerFormat，默认Long
        /// </summary>
        /// <remarks>
        /// 详细信息请参见<see cref="System.Windows.Forms.DateTimePickerFormat"/>
        /// </remarks>
        public string DateTimeFormat {
            get {
                return ((string)(this.DependencyObject[DateTimeElement.DateTimeFormatProperty]));
            }
            set {
                this.DependencyObject[DateTimeElement.DateTimeFormatProperty] = value;
            }
        }
        
        /// <summary>
        /// 周开始的第一天，默认0
        /// </summary>
        public int FirstDayOfWeek {
            get {
                return ((int)(this.DependencyObject[DateTimeElement.FirstDayOfWeekProperty]));
            }
            set {
                this.DependencyObject[DateTimeElement.FirstDayOfWeekProperty] = value;
            }
        }
        
        /// <summary>
        /// 是否显示周数
        /// </summary>
        public bool ShowWeekNumbers {
            get {
                return ((bool)(this.DependencyObject[DateTimeElement.ShowWeekNumbersProperty]));
            }
            set {
                this.DependencyObject[DateTimeElement.ShowWeekNumbersProperty] = value;
            }
        }
        
        /// <summary>
        /// 周末日期的背景颜色，类型：System.Drawing.Color，默认ControlText
        /// </summary>
        /// <remarks>
        /// 详细信息请参见<see cref="System.Drawing.Color"/>
        /// </remarks>
        public string WeekendColor {
            get {
                return ((string)(this.DependencyObject[DateTimeElement.WeekendColorProperty]));
            }
            set {
                this.DependencyObject[DateTimeElement.WeekendColorProperty] = value;
            }
        }
        
        /// <summary>
        /// 星期的显示格式格式，类型：Digiwin.Common.UI.mcDayFormat，默认Short
        /// </summary>
        public string WeekDaysFormat {
            get {
                return ((string)(this.DependencyObject[DateTimeElement.WeekDaysFormatProperty]));
            }
            set {
                this.DependencyObject[DateTimeElement.WeekDaysFormatProperty] = value;
            }
        }
        
        /// <summary>
        /// 编辑器的名称， 主键，不可空白
        /// </summary>
        public string Name {
            get {
                return ((string)(this.DependencyObject[AbstractColumnEditorElement.NameProperty]));
            }
            set {
                this.DependencyObject[AbstractColumnEditorElement.NameProperty] = value;
            }
        }
        
        /// <summary>
        /// 列所能输入的最大长度
        /// </summary>
        public int MaxLength {
            get {
                return ((int)(this.DependencyObject[AbstractColumnEditorElement.MaxLengthProperty]));
            }
            set {
                this.DependencyObject[AbstractColumnEditorElement.MaxLengthProperty] = value;
            }
        }
        
        /// <summary>
        /// 快捷键呼叫的公式
        /// </summary>
        public AbstractManualLambdaFormulaElement ShortcutFormula {
            get {
                return _shortcutFormula.Value;
            }
        }
        
        private void InitializeView() {
            _shortcutFormula = this.RegisterComplexViewPtr<AbstractManualLambdaFormulaElement>(DateTimeElement.ShortcutFormulaProperty);
        }
    }
}
namespace System.Configuration.Core.Tests {
    using System;
    using System.Collections.Generic;



    
    
    /// <summary>
    /// 动态参数项，代表一个参数类型，映射到Digiwin.Common.Services.DyncParameterValue
    /// </summary>
    [DataEntityRegisterAttribute()]
    sealed class DyncParameterValueElement : DependencyObjectView {
        
        /// <summary>
        /// DefaultType
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyObjectType DefaultType;
        
        /// <summary>
        /// 构造函数
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1810:InitializeReferenceTypeStaticFieldsInline")]
        static DyncParameterValueElement() {
            // DefaultType
            DefaultType = new DependencyObjectType("DyncParameterValueElement", new Attribute[] {
                        new DataEntityAttribute("Id")});
            DefaultType.RegisterBaseType(ParameterValueElement.DefaultType);
        }
        
        /// <summary>
        /// 构造函数
        /// </summary>
        public DyncParameterValueElement() : 
                base() {
        }
        
        /// <summary>
        /// 构造函数
        /// </summary>
        public DyncParameterValueElement(DependencyObject obj) : 
                base(obj) {
        }
        
        /// <summary>
        /// 参数的名称，不可空白
        /// </summary>
        public string ParameterName {
            get {
                return ((string)(this.DependencyObject[ParameterValueElement.ParameterNameProperty]));
            }
            set {
                this.DependencyObject[ParameterValueElement.ParameterNameProperty] = value;
            }
        }
        
        /// <summary>
        /// ID，标识，不可空白，同一集合内不可重复
        /// </summary>
        public string Id {
            get {
                return ((string)(this.DependencyObject[ValueBaseElement.IdProperty]));
            }
            set {
                this.DependencyObject[ValueBaseElement.IdProperty] = value;
            }
        }
    }
}
namespace System.Configuration.Core.Tests {
    using System;
    using System.Collections.Generic;



    
    
    /// <summary>
    /// 快捷键呼叫的公式
    /// </summary>
    [DataEntityRegisterAttribute()]
    sealed class AbstractManualLambdaFormulaElement : DependencyObjectView {
        
        /// <summary>
        /// 公式执行的快捷键
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty ShortcutProperty;
        
        /// <summary>
        /// 公式提示信息
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty TipProperty;
        
        /// <summary>
        /// 公式的值将被填充到哪个属性上
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty TargetProperty;
        
        /// <summary>
        /// 当前公式项的表达式。
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty ExpressionProperty;
        
        /// <summary>
        /// DefaultType
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyObjectType DefaultType;
        
        /// <summary>
        /// 构造函数
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1810:InitializeReferenceTypeStaticFieldsInline")]
        static AbstractManualLambdaFormulaElement() {
            // DefaultType
            DefaultType = new DependencyObjectType("AbstractManualLambdaFormulaElement");
            // Shortcut
            SimplePropertyAttribute simplePropertyAttribute0 = new SimplePropertyAttribute(GeneralDBType.String);
            simplePropertyAttribute0.Description = "公式执行的快捷键";
            ShortcutProperty = DefaultType.RegisterSimpleProperty("Shortcut", typeof(string), "F3", false, new Attribute[] {
                        simplePropertyAttribute0});
            // Tip
            SimplePropertyAttribute simplePropertyAttribute1 = new SimplePropertyAttribute(GeneralDBType.String);
            simplePropertyAttribute1.Description = "公式提示信息";
            TipProperty = DefaultType.RegisterSimpleProperty("Tip", typeof(string), null, false, new Attribute[] {
                        simplePropertyAttribute1});
            // Target
            SimplePropertyAttribute simplePropertyAttribute2 = new SimplePropertyAttribute(GeneralDBType.String);
            simplePropertyAttribute2.Description = "公式的值将被填充到哪个属性上";
            TargetProperty = DefaultType.RegisterSimpleProperty("Target", typeof(string), null, false, new Attribute[] {
                        simplePropertyAttribute2});
            // Expression
            SimplePropertyAttribute simplePropertyAttribute3 = new SimplePropertyAttribute(GeneralDBType.String);
            simplePropertyAttribute3.Description = "当前公式项的表达式。";
            ExpressionProperty = DefaultType.RegisterSimpleProperty("Expression", typeof(string), null, false, new Attribute[] {
                        simplePropertyAttribute3});
        }
        
        /// <summary>
        /// 构造函数
        /// </summary>
        public AbstractManualLambdaFormulaElement() : 
                base() {
        }
        
        /// <summary>
        /// 构造函数
        /// </summary>
        public AbstractManualLambdaFormulaElement(DependencyObject obj) : 
                base(obj) {
        }
        
        /// <summary>
        /// 公式执行的快捷键
        /// </summary>
        public string Shortcut {
            get {
                return ((string)(this.DependencyObject[AbstractManualLambdaFormulaElement.ShortcutProperty]));
            }
            set {
                this.DependencyObject[AbstractManualLambdaFormulaElement.ShortcutProperty] = value;
            }
        }
        
        /// <summary>
        /// 公式提示信息
        /// </summary>
        public string Tip {
            get {
                return ((string)(this.DependencyObject[AbstractManualLambdaFormulaElement.TipProperty]));
            }
            set {
                this.DependencyObject[AbstractManualLambdaFormulaElement.TipProperty] = value;
            }
        }
        
        /// <summary>
        /// 公式的值将被填充到哪个属性上
        /// </summary>
        public string Target {
            get {
                return ((string)(this.DependencyObject[AbstractManualLambdaFormulaElement.TargetProperty]));
            }
            set {
                this.DependencyObject[AbstractManualLambdaFormulaElement.TargetProperty] = value;
            }
        }
        
        /// <summary>
        /// 当前公式项的表达式。
        /// </summary>
        public string Expression {
            get {
                return ((string)(this.DependencyObject[AbstractManualLambdaFormulaElement.ExpressionProperty]));
            }
            set {
                this.DependencyObject[AbstractManualLambdaFormulaElement.ExpressionProperty] = value;
            }
        }
    }
}
namespace System.Configuration.Core.Tests {
    using System;
    using System.Collections.Generic;



    
    
    /// <summary>
    /// Column上编辑器的基类
    /// </summary>
    [DataEntityRegisterAttribute()]
    sealed class AbstractColumnEditorElement : DependencyObjectView {
        
        /// <summary>
        /// 编辑器的名称， 主键，不可空白
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty NameProperty;
        
        /// <summary>
        /// 列所能输入的最大长度
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty MaxLengthProperty;
        
        /// <summary>
        /// DefaultType
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyObjectType DefaultType;
        
        /// <summary>
        /// 构造函数
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1810:InitializeReferenceTypeStaticFieldsInline")]
        static AbstractColumnEditorElement() {
            // DefaultType
            DefaultType = new DependencyObjectType("AbstractColumnEditorElement", new Attribute[] {
                        new DataEntityAttribute("Name") });
            // Name
            SimplePropertyAttribute simplePropertyAttribute0 = new SimplePropertyAttribute(GeneralDBType.String);
            simplePropertyAttribute0.Description = "编辑器的名称， 主键，不可空白";
            NameProperty = DefaultType.RegisterSimpleProperty("Name", typeof(string), null, false, new Attribute[] {
                        simplePropertyAttribute0});
            // MaxLength
            SimplePropertyAttribute simplePropertyAttribute1 = new SimplePropertyAttribute(GeneralDBType.Int32);
            simplePropertyAttribute1.Description = "列所能输入的最大长度";
            MaxLengthProperty = DefaultType.RegisterSimpleProperty("MaxLength", typeof(int), null, false, new Attribute[] {
                        simplePropertyAttribute1});
        }
        
        /// <summary>
        /// 构造函数
        /// </summary>
        public AbstractColumnEditorElement() : 
                base() {
        }
        
        /// <summary>
        /// 构造函数
        /// </summary>
        public AbstractColumnEditorElement(DependencyObject obj) : 
                base(obj) {
        }
        
        /// <summary>
        /// 编辑器的名称， 主键，不可空白
        /// </summary>
        public string Name {
            get {
                return ((string)(this.DependencyObject[AbstractColumnEditorElement.NameProperty]));
            }
            set {
                this.DependencyObject[AbstractColumnEditorElement.NameProperty] = value;
            }
        }
        
        /// <summary>
        /// 列所能输入的最大长度
        /// </summary>
        public int MaxLength {
            get {
                return ((int)(this.DependencyObject[AbstractColumnEditorElement.MaxLengthProperty]));
            }
            set {
                this.DependencyObject[AbstractColumnEditorElement.MaxLengthProperty] = value;
            }
        }
    }
}
namespace System.Configuration.Core.Tests {
    using System;
    using System.Collections.Generic;



    
    
    /// <summary>
    /// 时间的Column编辑器
    /// </summary>
    [DataEntityRegisterAttribute()]
    sealed class TimeEditorElement : DependencyObjectView {
        
        /// <summary>
        /// 显示长时间还是短时间，默认长时间
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty IsLongTimeProperty;
        
        /// <summary>
        /// DefaultType
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyObjectType DefaultType;
        
        /// <summary>
        /// 构造函数
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1810:InitializeReferenceTypeStaticFieldsInline")]
        static TimeEditorElement() {
            // DefaultType
            DefaultType = new DependencyObjectType("TimeEditorElement");
            DefaultType.RegisterBaseType(AbstractColumnEditorElement.DefaultType);
            // IsLongTime
            SimplePropertyAttribute simplePropertyAttribute0 = new SimplePropertyAttribute(GeneralDBType.Boolean);
            simplePropertyAttribute0.Description = "显示长时间还是短时间，默认长时间";
            IsLongTimeProperty = DefaultType.RegisterSimpleProperty("IsLongTime", typeof(bool), true, false, new Attribute[] {
                        simplePropertyAttribute0});
        }
        
        /// <summary>
        /// 构造函数
        /// </summary>
        public TimeEditorElement() : 
                base() {
        }
        
        /// <summary>
        /// 构造函数
        /// </summary>
        public TimeEditorElement(DependencyObject obj) : 
                base(obj) {
        }
        
        /// <summary>
        /// 显示长时间还是短时间，默认长时间
        /// </summary>
        public bool IsLongTime {
            get {
                return ((bool)(this.DependencyObject[TimeEditorElement.IsLongTimeProperty]));
            }
            set {
                this.DependencyObject[TimeEditorElement.IsLongTimeProperty] = value;
            }
        }
        
        /// <summary>
        /// 编辑器的名称， 主键，不可空白
        /// </summary>
        public string Name {
            get {
                return ((string)(this.DependencyObject[AbstractColumnEditorElement.NameProperty]));
            }
            set {
                this.DependencyObject[AbstractColumnEditorElement.NameProperty] = value;
            }
        }
        
        /// <summary>
        /// 列所能输入的最大长度
        /// </summary>
        public int MaxLength {
            get {
                return ((int)(this.DependencyObject[AbstractColumnEditorElement.MaxLengthProperty]));
            }
            set {
                this.DependencyObject[AbstractColumnEditorElement.MaxLengthProperty] = value;
            }
        }
    }
}
namespace System.Configuration.Core.Tests {
    using System;
    using System.Collections.Generic;



    
    
    /// <summary>
    /// 必输条件
    /// </summary>
    [DataEntityRegisterAttribute()]
    sealed class MandatoryConditionElement : DependencyObjectView {
        
        /// <summary>
        /// 默认值
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyProperty RangeProperty;
        
        /// <summary>
        /// DefaultType
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public static readonly DependencyObjectType DefaultType;
        
        private CachedViewPtr<ValueBaseElement> _left;
        
        private CachedViewPtr<DependencyObjectCollectionView<ValueBaseElement>> _range;
        
        private CachedViewPtr<DependencyObjectCollectionView<ValueBaseElement>> _values;
        
        /// <summary>
        /// 构造函数
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1810:InitializeReferenceTypeStaticFieldsInline")]
        static MandatoryConditionElement() {
            // DefaultType
            DefaultType = new DependencyObjectType("MandatoryConditionElement");
            DefaultType.RegisterBaseType(ConditionItemElement.DefaultType);
            // Range
            CollectionPropertyAttribute collectionPropertyAttribute0 = new CollectionPropertyAttribute(typeof(DependencyObject));
            collectionPropertyAttribute0.Description = "默认值";
            RangeProperty = DefaultType.RegisterCollectionProperty("Range", ValueBaseElement.DefaultType, true, new Attribute[] {
                        collectionPropertyAttribute0});
        }
        
        /// <summary>
        /// 构造函数
        /// </summary>
        public MandatoryConditionElement() : 
                base() {
            this.InitializeView();
        }
        
        /// <summary>
        /// 构造函数
        /// </summary>
        public MandatoryConditionElement(DependencyObject obj) : 
                base(obj) {
            this.InitializeView();
        }
        
        /// <summary>
        /// 条件比较符，类型：CompareOperator，不可空白
        /// </summary>
        /// <remarks>
        /// 详细信息请参见<see cref="CompareOperator"/>
        /// </remarks>
        public string CompareOperator {
            get {
                return ((string)(this.DependencyObject[ConditionItemElement.CompareOperatorProperty]));
            }
            set {
                this.DependencyObject[ConditionItemElement.CompareOperatorProperty] = value;
            }
        }
        
        /// <summary>
        /// ID，标识，不可空白，同一集合内不可重复
        /// </summary>
        public string Id {
            get {
                return ((string)(this.DependencyObject[ConditionItemBaseElement.IdProperty]));
            }
            set {
                this.DependencyObject[ConditionItemBaseElement.IdProperty] = value;
            }
        }
        
        /// <summary>
        /// 表达式的左侧
        /// </summary>
        public ValueBaseElement Left {
            get {
                return _left.Value;
            }
        }
        
        /// <summary>
        /// 默认值
        /// </summary>
        public DependencyObjectCollectionView<ValueBaseElement> Range {
            get {
                return _range.Value;
            }
        }
        
        /// <summary>
        /// 表达式的右侧部分，可为多项
        /// </summary>
        public DependencyObjectCollectionView<ValueBaseElement> Values {
            get {
                return _values.Value;
            }
        }
        
        private void InitializeView() {
            _left = this.RegisterComplexViewPtr<ValueBaseElement>(ConditionItemElement.LeftProperty);
            _range = this.RegisterCollectionViewPtr<ValueBaseElement>(MandatoryConditionElement.RangeProperty);
            _values = this.RegisterCollectionViewPtr<ValueBaseElement>(ConditionItemElement.ValuesProperty);
        }
    }
}
